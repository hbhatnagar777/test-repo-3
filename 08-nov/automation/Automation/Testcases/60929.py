# -*- coding: utf-8 -*-
# --------------------------------------------------------------------------
# Copyright Commvault Systems, Inc.
# See LICENSE.txt in the project root for
# license information.
# --------------------------------------------------------------------------

"""
Main file for executing this test case

TestCase is the only class defined in this file.

TestCase: Test case for Disable "send failed items to index" feature with regkey.

TestCase:
    __init__()                   --  initialize TestCase class

    setup()                     --  Setup function of this test case

    run()                       --  run function of this test case

    view_failed_items_list()    --  Views failed item list for the job.

    navigate_to_client_page()   --  Navigates to the client page.

    simulate_failure_files()    --  Add registry keys to simulate failure files.

    backup_job()                --  Runs a Full backup job for given subclient.

    validate_key_set_from_logs()    --  Validates Key is set in clBackup logs

    modify_backup_out()         --  Modifies backup.out on client

    remove_registry_key()       --  Remove registry keys to disable simulate failure files.


Input Example:

    "testCases":
            {
                "60929": {
                    "ClientName": None,
                    "AgentName": None,
                    "BackupsetName": None,
                    "PlanName": None,
                }
            }

"""
from selenium.common.exceptions import NoSuchElementException

from AutomationUtils.cvtestcase import CVTestCase
from AutomationUtils.windows_machine import WindowsMachine
from AutomationUtils.unix_machine import UnixMachine
from FileSystem.FSUtils.fshelper import FSHelper
from Web.Common.cvbrowser import BrowserFactory
from Web.Common.cvbrowser import Browser
from Web.Common.exceptions import CVTestStepFailure
from Web.Common.page_object import TestStep
from Web.AdminConsole.adminconsole import AdminConsole
from Web.AdminConsole.Components.panel import Backup, PanelInfo
from Web.AdminConsole.Components.table import Table
from Web.AdminConsole.AdminConsolePages.Jobs import Jobs
from Web.AdminConsole.FileServerPages.file_servers import FileServers
from Web.AdminConsole.FileServerPages.fsagent import FsSubclient
from Reports.utils import TestCaseUtils

import time


class TestCase(CVTestCase):
    test_step = TestStep()

    def __init__(self):
        """Initializes test case class object"""

        super(TestCase, self).__init__()
        self.name = "Test case for Disable 'send failed items to index' feature with regkey."
        self.browser = None
        self.admin_console = None
        self.navigator = None
        self.file_server = None
        self.sub_client_name = None
        self.test_path = None
        self.fs_sub_client = None
        self.fs_helper = None
        self.jobs = None
        self.table = None
        self.panel_info = None
        self.os_name = None
        self.client_machine = None
        self.fsa = "FileSystemAgent"
        self.utils = TestCaseUtils(self)
        self.tcinputs = {
            "ClientName": None,
            "AgentName": None,
            "BackupsetName": None,
            "PlanName": None,
        }

    def wait_for_job_completion(self, job_id):
        """ Function to wait till job completes
                Args:
                    job_id (str): Entity which checks the job completion status
        """
        self.log.info("%s Waits for job completion %s", "*" * 8, "*" * 8)
        job_obj = self.commcell.job_controller.get(job_id)

        if job_obj.wait_for_completion():
            self.log.info("Job completed successfully")
        else:
            raise CVTestStepFailure("Job Failed")

    @test_step
    def navigate_to_client_page(self):
        """ Navigates to the input client page """
        self.navigator = self.admin_console.navigator
        self.navigator.navigate_to_file_servers()
        self.file_server.access_server(self.client.display_name)
        self.admin_console.wait_for_completion()

    @test_step
    def define_content(self):
        """ Create data at sub-client content location."""
        self.client_machine.create_directory(directory_name=self.test_path, force_create=True)
        for i in range(10):
            self.client_machine.create_file(self.client_machine.join_path(self.test_path, f"failme_open{i}.txt"),
                                            "Test File generated by automation", file_size=10240)
        for i in range(10, 20):
            self.client_machine.create_file(self.client_machine.join_path(self.test_path, f"regular_open{i}.txt"),
                                            "Test File generated by automation", file_size=10240)

    @test_step
    def simulate_failure_files(self):
        """ Add registry keys to simulate failures and disable this feature."""
        if "windows" in self.os_name.lower():
            self.client_machine.create_registry(self.fsa, 'nSIMULATEBACKUPFAILURES', 1, reg_type='DWord')
            self.client_machine.create_registry(self.fsa, 'SendFailedFilesToIndexForGUI', 0, reg_type='DWord')
            self.client._service_operations(operation="RESTART_SVC_GRP")
            time.sleep(60)
        else:
            self.client_machine.create_registry(self.fsa, 'sReportFailureOnENOENT', "Y")
            self.client_machine.create_registry(self.fsa, 'SendFailedFilesToIndexForGUI', "0")
            self.client.restart_service()
            time.sleep(60)

    @test_step
    def add_sub_client(self):
        """ Creates new sub_client
                Raises:
                    Exception:
                        -- if fails to add entity
        """
        self.navigate_to_client_page()
        self.delete_sub_client()
        self.fs_sub_client.add_fs_subclient(backup_set=self.tcinputs['BackupsetName'],
                                            subclient_name=self.sub_client_name,
                                            plan=self.tcinputs['PlanName'],
                                            define_own_content=True,
                                            backup_data=[self.test_path],
                                            file_system=self.os_name,
                                            remove_plan_content=True)
        self.backupset.subclients.refresh()
        self.subclient = self.backupset.subclients.get(self.sub_client_name)

    @test_step
    def backup_job(self, backup_type):
        """ Function to run a backup job
            Args:
                backup_type (BackupType) : Type of backup (FULL, INCR, DIFFERENTIAL, SYN_FULL)
            Raises:
                Exception :
                 -- if fails to run the backup
        """
        self.log.info("%s Starts Backup job %s for subclient %s", backup_type,
                      "*" * 8, "*" * 8)
        self.navigate_to_client_page()
        job_id = self.fs_sub_client.backup_subclient(backupset_name=self.tcinputs['BackupsetName'],
                                                     subclient_name=self.sub_client_name,
                                                     backup_type=backup_type)

        if backup_type == Backup.BackupType.FULL or backup_type == Backup.BackupType.INCR:
            job = self.commcell.job_controller.get(job_id)
            while job.phase.lower() != 'backup':
                time.sleep(2)
            job.pause(wait_for_job_to_pause=True)
            self.log.info("Job paused at backup phase")
            if backup_type == Backup.BackupType.FULL:
                for i in range(10):
                    self.client_machine.delete_file(
                        self.client_machine.join_path(self.test_path, f"failme_open{i}.txt"))
            else:
                for i in range(20, 22):
                    self.client_machine.delete_file(
                        self.client_machine.join_path(self.test_path, f"failme_open{i}.txt"))
            job.resume(wait_for_job_to_resume=True)
            self.log.info("Job Resumed")

        self.wait_for_job_completion(job_id)
        return job_id

    @test_step
    def validate_key_set_from_logs(self, job_id):
        """ Validates Key is set in clBackup logs"""
        if "windows" in self.os_name.lower():
            log_file = "clBackup.log"
        else:
            log_file = "clBackupChild.log"

        line = self.client_machine.get_logs_for_job_from_file(job_id=job_id, log_file_name=log_file,
                                                              search_term="SendFailedFilesToIndexForGUI")

        if line is not None and "Register key SendFailedFilesToIndexForGUI is set to 0. Failed items will not be updated to index" in line:
            self.log.info(
                f"Log validation passed. Found Register key SendFailedFilesToIndexForGUI is set to 0. Failed items will not be updated to index in {log_file}")
        else:
            self.log.info(f"Log validation failed.")

    @test_step
    def view_failed_items_list_job_details(self, job_id, files):
        """ Views Failed items on Command Center form job details page."""
        self.navigator.navigate_to_jobs()
        self.jobs.access_job_history()
        self.admin_console.refresh_page()
        self.jobs.view_job_details(job_id)
        details = self.panel_info.get_details()
        self.panel_info.open_hyperlink_on_tile(details['Failures'])
        try:
            total_failed_count = self.table.get_total_rows_count()
        except NoSuchElementException:
            if files == 0:
                total_failed_count = 0
            else:
                raise CVTestStepFailure("Failed to load failed items page")
        if total_failed_count != files:
            raise CVTestStepFailure(f"Incorrect number of failed items reported. Reported count: {total_failed_count}, "
                                    f"Correct: {files}")

    @test_step
    def modify_backup_out(self, job_id):
        """ Modifies Backup.out file on client"""
        jr_dir = self.client_machine.join_path(self.client.job_results_directory, 'CV_JobResults', '2', '0', job_id)
        self.client_machine.rename_file_or_folder(self.client_machine.join_path(jr_dir, "backup.out"),
                                                  self.client_machine.join_path(jr_dir, "modified_backup.out"))

    @test_step
    def delete_sub_client(self):
        """ Verifies whether subclient exists or not and then deletes the subclient """
        if self.fs_sub_client.is_subclient_exists(self.sub_client_name):
            self.log.info("%s Deletes subclient %s", "*" * 8, "*" * 8)
            self.fs_sub_client.delete_subclient(self.tcinputs['BackupsetName'],
                                                self.sub_client_name)
            self.admin_console.wait_for_completion()

    @test_step
    def remove_registry_key(self):
        """
            Remove registry keys to enable this feature and disable simulating failures.
        """
        if "windows" in self.client.os_info.lower():
            self.client_machine = WindowsMachine(self.client, self.commcell)
            self.client_machine.remove_registry(self.fsa, 'nSIMULATEBACKUPFAILURES')
            self.client_machine.remove_registry(self.fsa, 'SendFailedFilesToIndexForGUI')
            self.client._service_operations(operation="RESTART_SVC_GRP")
            time.sleep(60)
        else:
            self.client_machine = UnixMachine(self.client, self.commcell)
            self.client_machine.remove_registry(self.fsa, 'sReportFailureOnENOENT')
            self.client_machine.remove_registry(self.fsa, 'SendFailedFilesToIndexForGUI')
            self.client.restart_service()
            time.sleep(60)

    def setup(self):
        """Setup function of this test case"""

        self.sub_client_name = self.id

        self.browser = BrowserFactory().create_browser_object()
        self.browser.open()
        self.admin_console = AdminConsole(self.browser, self.commcell.webconsole_hostname)

        self.admin_console.login(username=self._inputJSONnode['commcell']['commcellUsername'],
                                 password=self._inputJSONnode['commcell']['commcellPassword'])
        self.navigator = self.admin_console.navigator

        self.file_server = FileServers(self.admin_console)
        self.fs_sub_client = FsSubclient(self.admin_console)
        self.jobs = Jobs(self.admin_console)
        self.table = Table(self.admin_console)
        self.panel_info = PanelInfo(self.admin_console, "Job details")
        self.fs_helper = FSHelper(self)
        self.fs_helper.populate_tc_inputs(self, mandatory=False)
        self.os_name = self.client.os_info
        self.test_path = self.tcinputs.get("TestPath")

        if "windows" in self.os_name.lower():
            self.client_machine = WindowsMachine(self.client, self.commcell)
        else:
            self.client_machine = UnixMachine(self.client, self.commcell)

    def run(self):
        """Run function of this test case"""

        _desc = """
                1. Define sub-client content: 10 files that will be added as failures and 10 regular files. 
                2. Add registry key to simulate backup failures and to not send failure files to index.
                3. Add a new sub-client and run a Backup job and wait for Job completion.
                4. Validate from logs that failure files were not send to index.
                5. View and validate Failed item list for the job from job details page. 
                This list will be fetched from the client.
                5. Modify backup.out on the client.
                6. View and validate Failed item list is empty for the job from job details page. 
                This list will be empty as it is fetched from the index. 
                """

        try:
            self.log.info(_desc)

            self.define_content()

            self.simulate_failure_files()

            self.add_sub_client()

            job_id = self.backup_job(Backup.BackupType.FULL)

            self.validate_key_set_from_logs(job_id)

            self.view_failed_items_list_job_details(job_id, 10)

            self.modify_backup_out(job_id)

            self.view_failed_items_list_job_details(job_id, 0)

        except Exception as exp:
            self.utils.handle_testcase_exception(exp)

    def tear_down(self):
        """Performs final clean up after test case execution."""
        self.remove_registry_key()
        AdminConsole.logout_silently(self.admin_console)
        Browser.close_silently(self.browser)
