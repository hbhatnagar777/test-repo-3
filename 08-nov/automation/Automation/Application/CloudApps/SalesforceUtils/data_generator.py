# -*- coding: utf-8 -*-

# --------------------------------------------------------------------------
# Copyright Commvault Systems, Inc.
# See LICENSE.txt in the project root for
# license information.
# --------------------------------------------------------------------------
"""
Main file for data generation for Salesforce automation

There are two classes defined in this file:
    StringType              : Enum for types of strings that can be generated by SalesforceDataGenerator

    SalesforceDataGenerator : Class to handle random data generation operations for Salesforce

SalesforceDataGenerator:
    __init__()                          --  initializes SalesforceDataGenerator object

    generate_data()                     --  Generates data for insert into Salesforce
"""
import datetime
import random
import string
from base64 import b64encode
from enum import Enum
from AutomationUtils import logger

IGNORE_FIELDS = ('OwnerId', 'CurrencyIsoCode', 'CreatedDate', 'CreatedById', 'LastModifiedDate', 'LastModifiedById')


class StringType(Enum):
    """Types of strings that can be generated by SalesforceDataGenerator"""
    LOWERCASE = string.ascii_lowercase
    LETTERS = string.ascii_letters
    DIGITS = string.digits
    LETTERS_AND_DIGITS = string.ascii_letters + string.digits
    ALL = string.printable


class SalesforceDataGenerator:
    """Class to handle random data generation operations for Salesforce"""

    def __init__(self, sf_connector):
        """
        Constructor for this class

        Args:
            sf_connector (SalesforceConnector):
        """
        self.__sf_connector = sf_connector
        self.__datetime = datetime.datetime.utcnow()
        self.__log = logger.get_log()
        self.__generator = {
            "date": self.__gen_date,
            "datetime": self.__gen_datetime,
            "email": self.__gen_email,
            "url": self.__gen_url,
            "string": self.__gen_text,
            "textarea": self.__gen_long_text,
            "int": self.__gen_number,
            "double": self.__gen_double,
            "currency": self.__gen_currency,
            "percent": self.__gen_percent,
            "phone": self.__gen_phone,
            "boolean": self.__gen_boolean
        }

    def generate_data(self, sf_object, field_names=None, rec_count=500):
        """
        Generates data for insert into Salesforce.

        Args:
            sf_object (collections.OrderedDict): Describes of object. Retrieve from salesforce using describe_object()
                                                method in SalesforceConnector
            field_names (list): List of FullNames of Fields without CustomObject FullName prefix
            rec_count (int): Number of records

        Returns:
            list[dict]: List of dicts of data
        """
        fields = [field for field in sf_object['fields'] if field['createable']]
        if field_names:
            fields = [field for field in fields if field['name'] in field_names]
        data = dict()
        for field in fields:
            self.__log.info(f"Generating data for field {field['name']}")
            if field['name'] in IGNORE_FIELDS:
                self.__log.info("Field in ignore list. Skipping...")
            elif field['type'].lower() in self.__generator:
                self.__log.info(f"Field type {field['type']} found in generator. Creating random data.")
                data[field['name']] = self.__generator[field['type'].lower()](rec_count)
            elif field['restrictedPicklist']:
                self.__log.info(f"Field is a picklist. Selecting values from {field['picklistValues']}.")
                data[field['name']] = random.choices([entry['value'] for entry in field['picklistValues']], k=rec_count)
            elif field['type'] == 'reference':
                self.__log.info(f"Field is reference to object(s): {field['referenceTo']}. Querying parent "
                                f"object {field['referenceTo'][0]} for data.")
                parent_ids = self.__sf_connector.bulk_query(
                    query=f"SELECT Id FROM {field['referenceTo'][0]} ORDER BY CreatedDate DESC LIMIT {rec_count}",
                    current_session=False
                )
                data[field['name']] = random.sample([row['Id'] for row in parent_ids], k=rec_count)
            else:
                self.__log.info(f"Field type {field['type']} not supported. Skipping field")
        return [{key: val[i] for key, val in data.items()} for i in range(rec_count)]

    def generate_content_version(self, rec_count=500, file_names=None):
        """
        Creates binary data and puts in a dictionary that can be uploaded via Salesforce's REST api to ContentVersion
        object. Each file will be 2MB in size

        Args:
            rec_count (int): number of files to create
            file_names (list[str]): list of file names (Use for creating new versions of existing files)

        Returns:
            list[dict]: ContentVersion with Title, PathOnClient, ContentLocation and VersionData fields
        """
        if file_names:
            rec_count = len(file_names)
        file_data = [b64encode(self.__gen_string(2048, StringType.LETTERS_AND_DIGITS).encode()).decode() for _ in range(rec_count)]
        if not file_names:
            file_names = [f"File_{self.__gen_string(5)}" for _ in range(rec_count)]
        return [
            {
                'Title': name,
                'PathOnClient': f"{name}.txt",
                'ContentLocation': 'S',
                'VersionData': data
            } for name, data in zip(file_names, file_data)
        ]

    def __gen_email(self, rec_count):
        """
        Generates list of emails

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [f"{self.__gen_string(random.randint(8, 15), StringType.LOWERCASE)}@test.com" for _ in range(rec_count)]

    def __gen_url(self, rec_count):
        """
        Generates list of urls

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [f"https://www.{self.__gen_string(5, StringType.LOWERCASE)}.com" for _ in range(rec_count)]

    def __gen_date(self, rec_count):
        """
        Generates list of date strings

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [self.__datetime.strftime("%Y-%m-%d") for _ in range(rec_count)]

    def __gen_datetime(self, rec_count):
        """
        Generates list of date time strings

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [self.__datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S') for _ in range(rec_count)]

    def __gen_boolean(self, rec_count):
        """
        Generates list of boolean data

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [str(random.random() > 0.5) for _ in range(rec_count)]

    def __gen_text(self, rec_count):
        """
        Generates list of short (length 10) strings

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [self.__gen_string(random.randint(5, 30) if rec_count > 1000000 else 10) for _ in range(rec_count)]

    def __gen_long_text(self, rec_count):
        """
        Generates list of long (length 200) strings

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [self.__gen_string(200) for _ in range(rec_count)]

    def __gen_number(self, rec_count):
        """
        Generates list of numbers

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [self.__gen_string(random.randint(0, 10), StringType.DIGITS) for _ in range(rec_count)]

    def __gen_double(self, rec_count):
        """
        Generates list of double values

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [str(random.random()) for _ in range(rec_count)]

    def __gen_currency(self, rec_count):
        """
        Generates list of currency values

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [f"{self.__gen_string(2, StringType.DIGITS)}.{self.__gen_string(2, StringType.DIGITS)}"
                for _ in range(rec_count)]

    def __gen_percent(self, rec_count):
        """
        Generates list of percentage figures

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [str(random.randint(0, 100)) for _ in range(rec_count)]

    def __gen_phone(self, rec_count):
        """
        Generates list of random phone numbers

        Args:
            rec_count (int): Number of records

        Returns:
            list: data
        """
        return [self.__gen_string(10, StringType.DIGITS) for _ in range(rec_count)]

    def __gen_string(self, str_length, str_type=StringType.LETTERS_AND_DIGITS):
        """
        Generates a random string

        Args:
            str_length (int): Length of string
            str_type (StringType): Use this parameter to control the type of characters in the return string

        Returns:
            str: Random string
        """
        return ''.join(random.choices(str_type.value, k=str_length))
