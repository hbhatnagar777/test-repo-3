{
	"info": {
		"_postman_id": "29bd24b1-65f0-4589-8ed5-14dca8cf55ce",
		"name": "PAPI -- FirewallTopology",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0 - Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"Token\", jsonData.token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"mode\":4,\r\n    \"domain\":\"\",\r\n    \"username\":\"{{UserName}}\",\r\n    \"password\":\"{{Password}}\",\r\n    \"commserver\":\"\"\r\n    \r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Login",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Client Group 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"clientGroupId1\", jsonData.clientGroupDetail.clientGroup.clientGroupId);",
							"postman.setEnvironmentVariable(\"clientGroupName1\", jsonData.clientGroupDetail.clientGroup.clientGroupName);",
							"",
							"tests[\"Response Body contains clientGroupName\"] = responseBody.has(\"clientGroupName\");",
							"tests[\"Response Body contains clientGroupDetail\"] = responseBody.has(\"clientGroupDetail\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"clientGroupName1 = \"PAPI Topo Group 1\";",
							"postman.setEnvironmentVariable(\"clientGroupName1\", clientGroupName1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{TOKEN}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"clientGroupOperationType\": 1,\r\n  \"clientGroupDetail\": {\r\n    \"description\": \"Client Group created for PAPI Network Topology APIs\",\r\n    \"claQuota\": 7,\r\n    \"clientGroup\": {\r\n      \"clientGroupName\": \"{{clientGroupName1}}\"\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/ClientGroup",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"ClientGroup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Client Group 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"clientGroupId2\", jsonData.clientGroupDetail.clientGroup.clientGroupId);",
							"postman.setEnvironmentVariable(\"clientGroupName2\", jsonData.clientGroupDetail.clientGroup.clientGroupName);",
							"",
							"tests[\"Response Body contains clientGroupName\"] = responseBody.has(\"clientGroupName\");",
							"tests[\"Response Body contains clientGroupDetail\"] = responseBody.has(\"clientGroupDetail\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"clientGroupName2 = \"PAPI Topo Group 2\";",
							"postman.setEnvironmentVariable(\"clientGroupName2\", clientGroupName2);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{TOKEN}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"clientGroupOperationType\": 1,\r\n  \"clientGroupDetail\": {\r\n    \"description\": \"Client Group created for PAPI Network Topology APIs\",\r\n    \"claQuota\": 7,\r\n    \"clientGroup\": {\r\n      \"clientGroupName\": \"{{clientGroupName2}}\"\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/ClientGroup",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"ClientGroup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Client Group 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"postman.setEnvironmentVariable(\"clientGroupId3\", jsonData.clientGroupDetail.clientGroup.clientGroupId);",
							"postman.setEnvironmentVariable(\"clientGroupName3\", jsonData.clientGroupDetail.clientGroup.clientGroupName);",
							"",
							"tests[\"Response Body contains clientGroupName\"] = responseBody.has(\"clientGroupName\");",
							"tests[\"Response Body contains clientGroupDetail\"] = responseBody.has(\"clientGroupDetail\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"clientGroupName3 = \"PAPI Topo Group 3\";",
							"postman.setEnvironmentVariable(\"clientGroupName3\", clientGroupName3);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{TOKEN}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"clientGroupOperationType\": 1,\r\n  \"clientGroupDetail\": {\r\n    \"description\": \"Client Group created for PAPI Network Topology APIs\",\r\n    \"claQuota\": 7,\r\n    \"clientGroup\": {\r\n      \"clientGroupName\": \"{{clientGroupName3}}\"\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/ClientGroup",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"ClientGroup"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Firewall Topology",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firewallTopologies\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology"
					]
				}
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"firewallTopologies\": [\n  {\n   \"topology\": {\n    \"id\": 6561196,\n    \"name\": \"dolore proident ut exercitation\"\n   },\n   \"topologyType\": \"TWO_WAY\",\n   \"clientType\": \"LAPTOP\"\n  },\n  {\n   \"topology\": {\n    \"id\": -12439279,\n    \"name\": \"ut\"\n   },\n   \"topologyType\": \"ONEWAY_FORWARDING\",\n   \"clientType\": \"SERVER\"\n  }\n ]\n}"
				},
				{
					"name": "Requested Details not found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "POST Firewall Topology",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"topologyId\", jsonData.topologyId);\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"topologyName = \"PAPI_Topology_{{$timestamp}}\";\r",
							"postman.setEnvironmentVariable(\"topologyName\", topologyName);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"topologyName\": \"{{topologyName}}\",\n    \"clientType\": \"LAPTOP\",\n    \"topologyType\": \"ONE_WAY\",\n    \"tunnelProtocol\": \"ENCRYPTED\",\n    \"tunnelsPerRoute\": 8,\n    \"useWildCardProxy\": true,\n    \"encryptTraffic\": true,\n    \"firewallGroups\": [\n        {\n            \"groupType\": \"EXTERNAL\",\n            \"clientGroupId\": {{clientGroupId1}},\n            \"advancedOptions\": {\n                \"tunnelPort\": 443,\n                \"keepAliveInterval\": 200\n            }\n        },\n        {\n            \"groupType\": \"INTERNAL\",\n            \"clientGroupId\": {{clientGroupId2}},\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 443,\n                \"keepAliveInterval\": 200\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology"
					]
				}
			},
			"response": [
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topologyName\": \"dolore quis minim\",\n    \"clientType\": \"SERVER\",\n    \"topologyType\": \"TWO_WAY\",\n    \"tunnelProtocol\": \"RAW\",\n    \"tunnelsPerRoute\": 62588378,\n    \"useWildCardProxy\": false,\n    \"encryptTraffic\": true,\n    \"firewallGroups\": [\n        {\n            \"groupType\": \"INTERNAL\",\n            \"clientGroupId\": 66228090,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 56236013,\n                \"keepAliveInterval\": -6724103\n            }\n        },\n        {\n            \"groupType\": \"EXTERNAL\",\n            \"clientGroupId\": -76052658,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 99945998,\n                \"keepAliveInterval\": -57086647\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topologyName\": \"dolore quis minim\",\n    \"clientType\": \"SERVER\",\n    \"topologyType\": \"TWO_WAY\",\n    \"tunnelProtocol\": \"RAW\",\n    \"tunnelsPerRoute\": 62588378,\n    \"useWildCardProxy\": false,\n    \"encryptTraffic\": true,\n    \"firewallGroups\": [\n        {\n            \"groupType\": \"INTERNAL\",\n            \"clientGroupId\": 66228090,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 56236013,\n                \"keepAliveInterval\": -6724103\n            }\n        },\n        {\n            \"groupType\": \"EXTERNAL\",\n            \"clientGroupId\": -76052658,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 99945998,\n                \"keepAliveInterval\": -57086647\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"topologyId\": 99630898,\n \"error\": {\n  \"errorMessage\": \"dolor Lorem deserunt dolore\",\n  \"errorCode\": -84747271\n }\n}"
				}
			]
		},
		{
			"name": "GET Firewall Topology Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate name and Id for company\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.topologyDetails.topology.id).to.eql(pm.collectionVariables.get(\"topologyId\"));\r",
							"    \r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"topologyDetails\");\r",
							"    pm.expect(pm.response.text()).to.include(\"topology\");\r",
							"    pm.expect(pm.response.text()).to.include(\"topologyType\");\r",
							"    pm.expect(pm.response.text()).to.include(\"clientType\");\r",
							"    pm.expect(pm.response.text()).to.include(\"encryptTraffic\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tunnelsPerRoute\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tunnelProtocol\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firewallGroups\");\r",
							"    pm.expect(pm.response.text()).to.include(\"groupType\");\r",
							"    pm.expect(pm.response.text()).to.include(\"mnemonic\");\r",
							"    pm.expect(pm.response.text()).to.include(\"clientGroupId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"advancedOptions\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tunnelPort\");\r",
							"    pm.expect(pm.response.text()).to.include(\"keepAliveInterval\");\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"    pm.expect(pm.response.text()).to.include(\"ONE_WAY\");\r",
							"   \r",
							"});\r",
							"\r",
							"pm.environment.set(\"topologyName\", jsonData.topologyDetails.topology.name);\r",
							"\r",
							"\r",
							"pm.test(\"Validate other settings\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.topologyDetails.topology.id).to.eql(pm.collectionVariables.get(\"topologyId\"));\r",
							"    pm.expect(jsonData.topologyDetails.topologyType).to.eql(\"ONE_WAY\");\r",
							"    pm.expect(jsonData.topologyDetails.clientType).to.eql(\"LAPTOP\");\r",
							"    pm.expect(jsonData.topologyDetails.encryptTraffic).to.eql(true);\r",
							"    pm.expect(jsonData.topologyDetails.tunnelsPerRoute).to.eql(8);\r",
							"    pm.expect(jsonData.topologyDetails.tunnelProtocol).to.eql(\"ENCRYPTED\");\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[0].groupType).to.eql(\"EXTERNAL\");\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[0].advancedOptions.tunnelPort).to.eql(443);\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[0].advancedOptions.keepAliveInterval).to.eql(200);\r",
							"    //pm.expect(jsonData.topologyDetails.firewallGroups[0].clientGroupId).to.eql(pm.environment.get(\"clientGroupId1\"));\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[1].groupType).to.eql(\"INTERNAL\");\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[1].advancedOptions.tunnelPort).to.eql(443);\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[1].advancedOptions.keepAliveInterval).to.eql(200);\r",
							"    //pm.expect(jsonData.topologyDetails.firewallGroups[4].clientGroupId).to.eql(pm.environment.get(\"clientGroupId2\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/NetWorkTopology/{{topologyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetWorkTopology",
						"{{topologyId}}"
					]
				}
			},
			"response": [
				{
					"name": "Requested Details not found",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"topologyDetails\": {\n  \"topology\": {\n   \"id\": 75871689,\n   \"name\": \"sed enim irure\"\n  },\n  \"topologyType\": \"CASCADING_GATEWAYS\",\n  \"clientType\": \"SERVER\",\n  \"useWildCardProxy\": true,\n  \"firewallGroups\": [\n   {\n    \"groupType\": \"PROXY_PERIMETER\",\n    \"clientGroupId\": -44949901,\n    \"mnemonic\": \"MY_COMMSERVE_AND_MEDIAAGENTS\",\n    \"advancedOptions\": {\n     \"tunnelPort\": 66797111,\n     \"keepAliveInterval\": 35426703\n    }\n   },\n   {\n    \"groupType\": \"PROXY_PERIMETER\",\n    \"clientGroupId\": 82749967,\n    \"mnemonic\": \"MY_COMMSERVE_AND_MEDIAAGENTS\",\n    \"advancedOptions\": {\n     \"tunnelPort\": -91980538,\n     \"keepAliveInterval\": 45832144\n    }\n   }\n  ],\n  \"encryptTraffic\": true,\n  \"tunnelProtocol\": \"REGULAR\",\n  \"tunnelsPerRoute\": -22487626\n }\n}"
				}
			]
		},
		{
			"name": "GET Firewall Topology",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"//var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"/**pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firewallTopologies\");\r",
							"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"topologyName\"));\r",
							"});**/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Firewall Topology",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate error code\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errorCode).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"topologyName\": \"{{topologyName}}\",\n    \"clientType\": \"SERVER\",\n    \"topologyType\": \"TWO_WAY\",\n    \"tunnelProtocol\": \"ENCRYPTED\",\n    \"tunnelsPerRoute\": 6,\n    \"useWildCardProxy\": false,\n    \"encryptTraffic\": true,\n    \"firewallGroups\": [\n        {\n            \"groupType\": \"EXTERNAL\",\n            \"clientGroupId\": {{clientGroupId1}},\n            \"advancedOptions\": {\n                \"tunnelPort\": 9999,\n                \"keepAliveInterval\": 300\n            }\n        },\n        {\n            \"groupType\": \"INTERNAL\",\n            \"clientGroupId\": {{clientGroupId3}},\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 443,\n                \"keepAliveInterval\": 200\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology/{{topologyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology",
						"{{topologyId}}"
					]
				}
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topologyName\": \"dolore quis minim\",\n    \"clientType\": \"SERVER\",\n    \"topologyType\": \"TWO_WAY\",\n    \"tunnelProtocol\": \"RAW\",\n    \"tunnelsPerRoute\": 62588378,\n    \"useWildCardProxy\": false,\n    \"encryptTraffic\": true,\n    \"firewallGroups\": [\n        {\n            \"groupType\": \"INTERNAL\",\n            \"clientGroupId\": 66228090,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 56236013,\n                \"keepAliveInterval\": -6724103\n            }\n        },\n        {\n            \"groupType\": \"EXTERNAL\",\n            \"clientGroupId\": -76052658,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 99945998,\n                \"keepAliveInterval\": -57086647\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"errorMessage\": \"in\",\n \"errorCode\": 81529131\n}"
				},
				{
					"name": "Requested details not found",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topologyName\": \"dolore quis minim\",\n    \"clientType\": \"SERVER\",\n    \"topologyType\": \"TWO_WAY\",\n    \"tunnelProtocol\": \"RAW\",\n    \"tunnelsPerRoute\": 62588378,\n    \"useWildCardProxy\": false,\n    \"encryptTraffic\": true,\n    \"firewallGroups\": [\n        {\n            \"groupType\": \"INTERNAL\",\n            \"clientGroupId\": 66228090,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 56236013,\n                \"keepAliveInterval\": -6724103\n            }\n        },\n        {\n            \"groupType\": \"EXTERNAL\",\n            \"clientGroupId\": -76052658,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 99945998,\n                \"keepAliveInterval\": -57086647\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"topologyName\": \"dolore quis minim\",\n    \"clientType\": \"SERVER\",\n    \"topologyType\": \"TWO_WAY\",\n    \"tunnelProtocol\": \"RAW\",\n    \"tunnelsPerRoute\": 62588378,\n    \"useWildCardProxy\": false,\n    \"encryptTraffic\": true,\n    \"firewallGroups\": [\n        {\n            \"groupType\": \"INTERNAL\",\n            \"clientGroupId\": 66228090,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 56236013,\n                \"keepAliveInterval\": -6724103\n            }\n        },\n        {\n            \"groupType\": \"EXTERNAL\",\n            \"clientGroupId\": -76052658,\n            \"mnemonic\": \"NONE\",\n            \"advancedOptions\": {\n                \"tunnelPort\": 99945998,\n                \"keepAliveInterval\": -57086647\n            }\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "GET Firewall Topology",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firewallTopologies\");\r",
							"     pm.expect(pm.response.text()).to.include(pm.environment.get(\"topologyName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Firewall Topology Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate name and Id for company\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.topologyDetails.topology.id).to.eql(pm.collectionVariables.get(\"topologyId\"));\r",
							"    \r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"topologyDetails\");\r",
							"    pm.expect(pm.response.text()).to.include(\"topology\");\r",
							"    pm.expect(pm.response.text()).to.include(\"topologyType\");\r",
							"    pm.expect(pm.response.text()).to.include(\"clientType\");\r",
							"    pm.expect(pm.response.text()).to.include(\"encryptTraffic\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tunnelsPerRoute\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tunnelProtocol\");\r",
							"    pm.expect(pm.response.text()).to.include(\"firewallGroups\");\r",
							"    pm.expect(pm.response.text()).to.include(\"groupType\");\r",
							"    pm.expect(pm.response.text()).to.include(\"mnemonic\");\r",
							"    pm.expect(pm.response.text()).to.include(\"clientGroupId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"advancedOptions\");\r",
							"    pm.expect(pm.response.text()).to.include(\"tunnelPort\");\r",
							"    pm.expect(pm.response.text()).to.include(\"keepAliveInterval\");\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"    \r",
							"   \r",
							"});\r",
							"\r",
							"pm.environment.set(\"topologyName\", jsonData.topologyDetails.topology.name);\r",
							"\r",
							"\r",
							"pm.test(\"Validate other settings\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.topologyDetails.topology.id).to.eql(pm.collectionVariables.get(\"topologyId\"));\r",
							"    pm.expect(jsonData.topologyDetails.topologyType).to.eql(\"TWO_WAY\");\r",
							"    pm.expect(jsonData.topologyDetails.clientType).to.eql(\"SERVER\");\r",
							"    pm.expect(jsonData.topologyDetails.encryptTraffic).to.eql(true);\r",
							"    pm.expect(jsonData.topologyDetails.tunnelsPerRoute).to.eql(6);\r",
							"    pm.expect(jsonData.topologyDetails.tunnelProtocol).to.eql(\"ENCRYPTED\");\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[0].groupType).to.eql(\"EXTERNAL\");\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[0].advancedOptions.tunnelPort).to.eql(9999);\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[0].advancedOptions.keepAliveInterval).to.eql(300);\r",
							"    //pm.expect(jsonData.topologyDetails.firewallGroups[0].clientGroupId).to.eql(pm.environment.get(\"clientGroupId1\"));\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[1].groupType).to.eql(\"INTERNAL\");\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[1].advancedOptions.tunnelPort).to.eql(443);\r",
							"    pm.expect(jsonData.topologyDetails.firewallGroups[1].advancedOptions.keepAliveInterval).to.eql(200);\r",
							"    //pm.expect(jsonData.topologyDetails.firewallGroups[4].clientGroupId).to.eql(pm.environment.get(\"clientGroupId3\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology/{{topologyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology",
						"{{topologyId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Firewall Topology",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate error code\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errorCode).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology/{{topologyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology",
						"{{topologyId}}"
					]
				}
			},
			"response": [
				{
					"name": "Requested Details not found",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal Server Error",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Success",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"description": "Added as a part of security scheme: apikey",
								"key": "Authtoken",
								"value": "<API Key>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/FirewallTopology/:topologyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"FirewallTopology",
								":topologyId"
							],
							"variable": [
								{
									"key": "topologyId"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"errorMessage\": \"in\",\n \"errorCode\": 81529131\n}"
				}
			]
		},
		{
			"name": "GET Firewall Topology",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//console.log(\"Request sent: \" ,pm.request.body.raw);\r",
							"console.log(\"Response received: \" ,responseBody);\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firewallTopologies\");\r",
							"     pm.expect(pm.response.text()).to.not.include(pm.environment.get(\"topologyName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/NetworkTopology",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"NetworkTopology"
					]
				}
			},
			"response": []
		},
		{
			"name": "Client Group 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Response has no errors\"] = jsonData.errorCode === 0;",
							"tests[\"Client Group: \"+postman.getEnvironmentVariable('clientGroupId1')+\" deleted successfully\"] = jsonData.errorCode === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{TOKEN}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/ClientGroup/{{clientGroupId1}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"ClientGroup",
						"{{clientGroupId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Client Group 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Response has no errors\"] = jsonData.errorCode === 0;",
							"tests[\"Client Group: \"+postman.getEnvironmentVariable('clientGroupId2')+\" deleted successfully\"] = jsonData.errorCode === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{TOKEN}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/ClientGroup/{{clientGroupId2}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"ClientGroup",
						"{{clientGroupId2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Client Group 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Response has no errors\"] = jsonData.errorCode === 0;",
							"tests[\"Client Group: \"+postman.getEnvironmentVariable('clientGroupId3')+\" deleted successfully\"] = jsonData.errorCode === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{Token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "authtoken",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{TOKEN}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/ClientGroup/{{clientGroupId3}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"ClientGroup",
						"{{clientGroupId3}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "companyId",
			"value": ""
		},
		{
			"key": "companyName",
			"value": ""
		},
		{
			"key": "topologyId",
			"value": ""
		}
	]
}