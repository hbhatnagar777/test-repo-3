{
	"info": {
		"_postman_id": "baef3763-c841-4b6e-855d-bde2436d96a1",
		"name": "Plan Operations",
		"description": "######/51512",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"Token\", jsonData.token);",
							"",
							"//tests[\"Response time is less than 5000ms\"] = responseTime < 5000;   //validate response time",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"",
							"var username = postman.getEnvironmentVariable(\"UserName\");                  ",
							"",
							"tests[\"Logged in User\"] = jsonData.userName === username;                //validate username of logged in user",
							"",
							"console.log(postman.getResponseHeader(\"Content-Type\"));",
							"console.log(postman.getEnvironmentVariable(\"Token\"));",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"mode\":\"{{Mode}}\",\r\n    \"domain\":\"\",\r\n    \"username\":\"{{UserName}}\",\r\n    \"password\":\"{{Password}}\",\r\n    \"commserver\":\"\"\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Login",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Login"
					]
				}
			},
			"response": [
				{
					"name": "LoginResp",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "1009",
							"name": "Content-Length",
							"description": "The length of the response body in octets (8-bit bytes)"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8",
							"name": "Content-Type",
							"description": "The mime type of this content"
						},
						{
							"key": "Date",
							"value": "Mon, 06 Feb 2017 08:36:28 GMT",
							"name": "Date",
							"description": "The date and time that the message was sent"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5",
							"name": "Server",
							"description": "A name for the server"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET",
							"name": "X-Powered-By",
							"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
						}
					],
					"cookie": [],
					"body": "{\r\"aliasName\":\"1\",\"userGUID\":\"907B1322-815B-4F81-BCAA-8ECB2D03AA0C\",\"loginAttempts\":0,\"remainingLockTime\":0,\"smtpAddress\":\"######\",\"userName\":\"###\",\"providerType\":1,\"ccn\":0,\"token\":\"QSDK 376d3218e0d7d94d0c7f2cd3e6087055b94d9fd96505441323fe3010e0dd1aaf03a8ed0d1f7854f11b0e1692fb58bd494f9f12f45c9123252b0145caf0c45f57b67c2381068c3e5500e5c41449a1ea0bb36c72e174a8306ad982e6974477aa6fdaf4ea270f9d946a970600765293113ae80f677bf635e0001464fff7b8fade7329366008da7b98d296179c71561b88c5027798004f19f92367e3a3c7cbf70b26c9c047a0b33eeb5a64da3db412ff38394b64cf70dcee06f1dc0a759f7f31845a05b6796ac4d6c620ab89aeac6d680cd5033d5f72627ac2e4f20f2f6e9189c2304cc7baaf755a06311b6c68f2755b1099a4f9e5169d3ff687691b66de7388fcdea2de5e0235dab1032968d2e141e8b2d8c\",\"capability\":4328650366975,\"forcePasswordChange\":false,\"isAccountLocked\":false,\"ownerOrganization\":{\r\"providerId\":0,\"providerDomainName\":\"Qinetix Commcell\"\r},\"providerOrganization\":{\r\"providerId\":0,\"providerDomainName\":\"Qinetix Commcell\"\r},\"errList\":[\r\r]\r}"
				}
			]
		},
		{
			"name": "Library",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"",
							"tests[\"Validating if Response Body has response tag\"] = responseBody.has(\"response\");",
							"tests[\"Validating if Response Body has entityInfo tag\"] = responseBody.has(\"entityInfo\");",
							"tests[\"Validating if Response Body has name tag\"] = responseBody.has(\"name\");",
							"tests[\"Validating if Response Body has id tag\"] = responseBody.has(\"id\");",
							"//var randIndex =(Math.random()*(jsonData.response.length));",
							"//console.log(randIndex)",
							"function getRandomInt(max) {",
							"  return Math.floor(Math.random() * Math.floor(max));",
							"}",
							"var randIndex = getRandomInt(jsonData.response.length);",
							"console.log(randIndex);",
							"postman.setEnvironmentVariable(\"libraryId\", jsonData.response[randIndex].entityInfo.id);",
							"postman.setEnvironmentVariable(\"libraryName\", jsonData.response[randIndex].entityInfo.name);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Library",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Library"
					]
				},
				"description": "<h2> Description </h2>\nThis operation returns a list of libraries.\n\n[_More Details_](http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_library.htm)"
			},
			"response": [
				{
					"name": "GET Library14",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}"
							}
						],
						"url": {
							"raw": "{{ServerURL}}/Library",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"Library"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 06:33:06 GMT"
						},
						{
							"key": "Content-Length",
							"value": "458"
						}
					],
					"cookie": [],
					"body": "{\n    \"response\": [\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm108\",\n                \"id\": 8\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm108\",\n                \"id\": 7\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm107\",\n                \"id\": 6\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm107\",\n                \"id\": 5\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm106\",\n                \"id\": 4\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm106\",\n                \"id\": 3\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm105\",\n                \"id\": 2\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm105\",\n                \"id\": 1\n            }\n        }\n    ]\n}"
				},
				{
					"name": "GET Library17",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}"
							}
						],
						"url": {
							"raw": "{{ServerURL}}/Library",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"Library"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "WEBSERVERCORE-FLAG",
							"value": "true"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-AspNet-Version",
							"value": "4.0.30319"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 12:53:59 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"response\": [\n        {\n            \"entityInfo\": {\n                \"name\": \"New Disk SPLibrary\",\n                \"id\": 16\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm108\",\n                \"id\": 8\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm108\",\n                \"id\": 7\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm107\",\n                \"id\": 6\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm107\",\n                \"id\": 5\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm106\",\n                \"id\": 4\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm106\",\n                \"id\": 3\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_SYS_smckb2pmm105\",\n                \"id\": 2\n            }\n        },\n        {\n            \"entityInfo\": {\n                \"name\": \"DL_smckb2pmm105\",\n                \"id\": 1\n            }\n        }\n    ]\n}"
				},
				{
					"name": "Library",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Authtoken",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "{{ServerUrl}}/Library",
							"host": [
								"{{ServerUrl}}"
							],
							"path": [
								"Library"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "206",
							"name": "Content-Length",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8",
							"name": "Content-Type",
							"description": ""
						},
						{
							"key": "Date",
							"value": "Wed, 14 Jun 2017 07:41:51 GMT",
							"name": "Date",
							"description": ""
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5",
							"name": "Server",
							"description": ""
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET",
							"name": "X-Powered-By",
							"description": ""
						}
					],
					"cookie": [],
					"body": "{\r\"response\":[\r{\r\"entityInfo\":{\r\"name\":\"fwMA_3lib\",\"id\":4\r}\r},{\r\"entityInfo\":{\r\"name\":\"IDCMA2Lib\",\"id\":3\r}\r},{\r\"entityInfo\":{\r\"name\":\"FirewallMALib\",\"id\":2\r}\r},{\r\"entityInfo\":{\r\"name\":\"CSLib\",\"id\":1\r}\r}\r]\r}"
				}
			]
		},
		{
			"name": "MediaAgent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
							"",
							"tests[\"Validating if Response Body has mediaAgentList tag\"] = responseBody.has(\"mediaAgentList\");",
							"tests[\"Validating if Response Body has status tag\"] = responseBody.has(\"status\");",
							"tests[\"Validating if Response Body has platform tag\"] = responseBody.has(\"platform\");",
							"tests[\"Validating if Response Body has mediaAgentId tag\"] = responseBody.has(\"mediaAgentId\");",
							"tests[\"Validating if Response Body has mediaAgentName tag\"] = responseBody.has(\"mediaAgentName\");",
							"postman.setEnvironmentVariable(\"mediaAgentName\", jsonData.mediaAgentList[0].mediaAgent.mediaAgentName);",
							"postman.setEnvironmentVariable(\"mediaAgentId\", jsonData.mediaAgentList[0].mediaAgent.mediaAgentId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"var libraryId = postman.getEnvironmentVariable(\"libraryId\"); ",
							"postman.setEnvironmentVariable(\"libraryId\", libraryId);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/MediaAgentForLibrary?libraryId={{libraryId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"MediaAgentForLibrary"
					],
					"query": [
						{
							"key": "libraryId",
							"value": "{{libraryId}}"
						}
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_mediaagent.htm"
			},
			"response": [
				{
					"name": "GET MediaAgent17",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}"
							}
						],
						"url": {
							"raw": "{{ServerURL}}/MediaAgentForLibrary?libraryId={{libraryId}}",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"MediaAgentForLibrary"
							],
							"query": [
								{
									"key": "libraryId",
									"value": "{{libraryId}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "WEBSERVERCORE-FLAG",
							"value": "true"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-AspNet-Version",
							"value": "4.0.30319"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 12:59:15 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"mediaAgentList\": [\n        {\n            \"mediaAgentId\": 2,\n            \"osVersion\": \"Windows Server 2012 R2 Datacenter\",\n            \"description\": \"\",\n            \"libraryType\": 0,\n            \"mediaAgentName\": \"S-200128-93-0\",\n            \"platform\": \"WinX64\",\n            \"status\": \"Ready\",\n            \"mediaAgent\": {\n                \"mediaAgentId\": 2,\n                \"_type_\": 11,\n                \"displayName\": \"smckb2pmm101\",\n                \"mediaAgentName\": \"S-200128-93-0\"\n            }\n        }\n    ]\n}"
				},
				{
					"name": "GET MediaAgent14",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}"
							}
						],
						"url": {
							"raw": "{{ServerURL}}/MediaAgentForLibrary?libraryId={{libraryId}}",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"MediaAgentForLibrary"
							],
							"query": [
								{
									"key": "libraryId",
									"value": "{{libraryId}}"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 07:04:46 GMT"
						},
						{
							"key": "Content-Length",
							"value": "224"
						}
					],
					"cookie": [],
					"body": "{\n    \"mediaAgentList\": [\n        {\n            \"mediaAgentId\": 3439,\n            \"osVersion\": \"Windows Server 2016 Standard\",\n            \"description\": \"\",\n            \"libraryType\": 0,\n            \"mediaAgentName\": \"smckb2pmm108\",\n            \"platform\": \"WinX64\",\n            \"status\": \"Offline\",\n            \"mediaAgent\": {\n                \"_type_\": 11\n            }\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Storage Pool Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Response Body has archiveGroupCopy tag\"] = responseBody.has(\"archiveGroupCopy\");",
							"if(tests[\"Response Body has newly created storage pool\"] = responseBody.has(\"storagePolicyName\"))",
							"{",
							"    console.log(\"The newly created storage pool is: \"+jsonData.archiveGroupCopy.storagePolicyName);",
							"    postman.setEnvironmentVariable(\"storagePoolName\",jsonData.archiveGroupCopy.storagePolicyName);",
							"}",
							"if(tests[\"Response Body has id of the newly created storage pool.\"] = responseBody.has(\"storagePolicyId\"))",
							"{",
							"    console.log(\"The newly created storage pool's id is: \"+jsonData.archiveGroupCopy.storagePolicyId);",
							"    postman.setEnvironmentVariable(\"storagePoolId\", jsonData.archiveGroupCopy.storagePolicyId);",
							"}",
							"if(tests[\"Response Body has newly create storage pool copy name\"] = responseBody.has(\"copyName\"))",
							"{",
							"    console.log(\"The newly created storage pool copy name is: \"+jsonData.archiveGroupCopy.copyName);",
							"    postman.setEnvironmentVariable(\"copyName\",jsonData.archiveGroupCopy.copyName);",
							"}",
							"tests[\"Response Body has an error code\"] = responseBody.has(\"errorCode\");",
							"tests[\"Response Body has an error code 0\"] = jsonData.error.errorCode === 0 ;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var storagePolicyId = postman.getEnvironmentVariable(\"storagePolicyId\");",
							"postman.setEnvironmentVariable(\"storagePolicyId\",storagePolicyId);",
							"var storagePolicyName = postman.getEnvironmentVariable(\"storagePolicyName\");",
							"postman.setEnvironmentVariable(\"storagePolicyName\",storagePolicyName);",
							"var libraryId = postman.getEnvironmentVariable(\"libraryId\");",
							"postman.setEnvironmentVariable(\"libraryId\",libraryId);",
							"var libraryName = postman.getEnvironmentVariable(\"libraryName\");",
							"postman.setEnvironmentVariable(\"libraryName\",libraryName);",
							"var mediaAgentName = postman.getEnvironmentVariable(\"mediaAgentName\");",
							"postman.setEnvironmentVariable(\"mediaAgentName\",mediaAgentName);",
							"var mediaAgentId = postman.getEnvironmentVariable(\"mediaAgentId\");",
							"postman.setEnvironmentVariable(\"mediaAgentId\",mediaAgentId);",
							"var copyName = postman.setEnvironmentVariable(\"copyName\");",
							"postman.setEnvironmentVariable(\"copyName\",copyName);",
							"var copyId = postman.getEnvironmentVariable(\"copyId\");",
							"postman.setEnvironmentVariable(\"copyId\",copyId);",
							"postman.setEnvironmentVariable(\"path\",\"C:\\\\\\\\StoragePool\"+Date.now())",
							"postman.setEnvironmentVariable(\"path1\",\"C:\\\\\\\\StoragePool1\"+Date.now())",
							"var storagePoolName = \"DDStoragePoolForPlan\" + new Date().getTime();",
							"postman.setEnvironmentVariable(\"tempStoragePoolName\", storagePoolName);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"storagePolicyName\": \"{{tempStoragePoolName}}\",\r\n  \"type\": 1,\r\n  \"copyName\": \"testDedupePool_primary\",\r\n  \"numberOfCopies\": 1,\r\n  \"clientGroup\": {\r\n    \"_type_\": 28,\r\n    \"clientGroupId\": 0,\r\n    \"clientGroupName\": \"\"\r\n  },\r\n  \"storage\": [\r\n    {\r\n      \"path\": \"{{path}}\",\r\n      \"mediaAgent\": {\r\n        \"mediaAgentId\": {{mediaAgentId}},\r\n        \"_type_\": 11,\r\n        \"mediaAgentName\": \"{{mediaAgentName}}\"\r\n      },\r\n      \"credentials\": {}\r\n    }\r\n  ],\r\n  \"storagePolicyCopyInfo\": {\r\n    \"copyType\": 1,\r\n    \"isFromGui\": true,\r\n    \"active\": 1,\r\n    \"isDefault\": 1,\r\n    \"numberOfStreamsToCombine\": 1,\r\n    \"dedupeFlags\": {\r\n      \"enableDASHFull\": 1,\r\n      \"hostGlobalDedupStore\": 1,\r\n      \"enableDeduplication\": 1\r\n    },\r\n    \"storagePolicyFlags\": {\r\n      \"blockLevelDedup\": 1,\r\n      \"enableGlobalDeduplication\": 1\r\n    },\r\n    \"DDBPartitionInfo\": {\r\n      \"maInfoList\": [\r\n        {\r\n          \"mediaAgent\": {\r\n            \"mediaAgentId\": {{mediaAgentId}},\r\n            \"_type_\": 11,\r\n            \"mediaAgentName\": \"{{mediaAgentName}}\"\r\n          },\r\n          \"subStoreList\": [\r\n            {\r\n              \"diskFreeWarningThreshholdMB\": 10240,\r\n              \"diskFreeThresholdMB\": 5120,\r\n              \"accessPath\": {\r\n                \"path\": \"{{path1}}\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"library\": {\r\n      \"libraryName\": \"{{libraryName}}\",\r\n      \"_type_\": 9,\r\n      \"libraryId\": {{libraryId}}\r\n    },\r\n    \"mediaAgent\": {\r\n      \"mediaAgentId\": {{mediaAgentId}},\r\n      \"_type_\": 11,\r\n      \"mediaAgentName\": \"{{mediaAgentName}}\"\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/StoragePool?Action=create",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"StoragePool"
					],
					"query": [
						{
							"key": "Action",
							"value": "create"
						}
					]
				}
			},
			"response": [
				{
					"name": "Storage Pool17",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"storagePolicyName\": \"New Diksk SP\",\r\n  \"type\": 1,\r\n  \"copyName\": \"New Disk SP_Primary\",\r\n  \"numberOfCopies\": 1,\r\n  \"clientGroup\": {\r\n    \"_type_\": 28,\r\n    \"clientGroupId\": 0,\r\n    \"clientGroupName\": \"\"\r\n  },\r\n  \"storage\": [\r\n    {\r\n      \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"mediaAgent\": {\r\n        \"mediaAgentId\": 2,\r\n        \"_type_\": 11,\r\n        \"mediaAgentName\": \"S-200128-93-0\"\r\n      },\r\n      \"credentials\": {}\r\n    }\r\n  ],\r\n  \"storagePolicyCopyInfo\": {\r\n    \"copyType\": 1,\r\n    \"isFromGui\": true,\r\n    \"active\": 1,\r\n    \"isDefault\": 1,\r\n    \"numberOfStreamsToCombine\": 1,\r\n    \"dedupeFlags\": {\r\n      \"enableDASHFull\": 1,\r\n      \"hostGlobalDedupStore\": 1,\r\n      \"enableDeduplication\": 1\r\n    },\r\n    \"storagePolicyFlags\": {\r\n      \"blockLevelDedup\": 1,\r\n      \"enableGlobalDeduplication\": 1\r\n    },\r\n    \"DDBPartitionInfo\": {\r\n      \"maInfoList\": [\r\n        {\r\n          \"mediaAgent\": {\r\n            \"mediaAgentId\": 2,\r\n            \"_type_\": 11,\r\n            \"mediaAgentName\": \"S-200128-93-0\"\r\n          },\r\n          \"subStoreList\": [\r\n            {\r\n              \"diskFreeWarningThreshholdMB\": 10240,\r\n              \"diskFreeThresholdMB\": 5120,\r\n              \"accessPath\": {\r\n                \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\dgdb3\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"library\": {\r\n      \"libraryName\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"_type_\": 9,\r\n      \"libraryId\": 0\r\n    },\r\n    \"mediaAgent\": {\r\n      \"mediaAgentId\": 2,\r\n      \"_type_\": 11,\r\n      \"mediaAgentName\": \"S-200128-93-0\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{ServerURL}}/StoragePool?Action=create",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"StoragePool"
							],
							"query": [
								{
									"key": "Action",
									"value": "create"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "WEBSERVERCORE-FLAG",
							"value": "true"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-AspNet-Version",
							"value": "4.0.30319"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 13:02:21 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"responseType\": 0,\n    \"archiveGroupCopy\": {\n        \"copyId\": 62,\n        \"_type_\": 18,\n        \"copyName\": \"New Disk SP_Primary\",\n        \"storagePolicyName\": \"New Diksk SP\",\n        \"storagePolicyId\": 63\n    },\n    \"error\": {\n        \"errorCode\": 0\n    }\n}"
				},
				{
					"name": "Storage Pool14",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"storagePolicyName\": \"New Disk SP\",\r\n  \"type\": 1,\r\n  \"copyName\": \"New Disk SP_Primary\",\r\n  \"numberOfCopies\": 1,\r\n  \"clientGroup\": {\r\n    \"_type_\": 28,\r\n    \"clientGroupId\": 0,\r\n    \"clientGroupName\": \"\"\r\n  },\r\n  \"storage\": [\r\n    {\r\n      \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"mediaAgent\": {\r\n        \"mediaAgentId\": 2,\r\n        \"_type_\": 11,\r\n        \"mediaAgentName\": \"S-200128-93-0\"\r\n      },\r\n      \"credentials\": {}\r\n    }\r\n  ],\r\n  \"storagePolicyCopyInfo\": {\r\n    \"copyType\": 1,\r\n    \"isFromGui\": true,\r\n    \"active\": 1,\r\n    \"isDefault\": 1,\r\n    \"numberOfStreamsToCombine\": 1,\r\n    \"dedupeFlags\": {\r\n      \"enableDASHFull\": 1,\r\n      \"hostGlobalDedupStore\": 1,\r\n      \"enableDeduplication\": 1\r\n    },\r\n    \"storagePolicyFlags\": {\r\n      \"blockLevelDedup\": 1,\r\n      \"enableGlobalDeduplication\": 1\r\n    },\r\n    \"DDBPartitionInfo\": {\r\n      \"maInfoList\": [\r\n        {\r\n          \"mediaAgent\": {\r\n            \"mediaAgentId\": 2,\r\n            \"_type_\": 11,\r\n            \"mediaAgentName\": \"S-200128-93-0\"\r\n          },\r\n          \"subStoreList\": [\r\n            {\r\n              \"diskFreeWarningThreshholdMB\": 10240,\r\n              \"diskFreeThresholdMB\": 5120,\r\n              \"accessPath\": {\r\n                \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\ddb3\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"library\": {\r\n      \"libraryName\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"_type_\": 9,\r\n      \"libraryId\": 0\r\n    },\r\n    \"mediaAgent\": {\r\n      \"mediaAgentId\": 2,\r\n      \"_type_\": 11,\r\n      \"mediaAgentName\": \"S-200128-93-0\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{ServerURL}}/StoragePool?Action=create",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"StoragePool"
							],
							"query": [
								{
									"key": "Action",
									"value": "create"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 08:41:53 GMT"
						},
						{
							"key": "Content-Length",
							"value": "181"
						}
					],
					"cookie": [],
					"body": "{\n    \"responseType\": 0,\n    \"archiveGroupCopy\": {\n        \"copyId\": 53,\n        \"_type_\": 18,\n        \"copyName\": \"New Disk SP_Primary\",\n        \"storagePolicyName\": \"New Disk SP\",\n        \"storagePolicyId\": 54\n    },\n    \"error\": {\n        \"errorCode\": 0\n    }\n}"
				}
			]
		},
		{
			"name": "Storage Pool Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"tests[\"Response Body has archiveGroupCopy tag\"] = responseBody.has(\"archiveGroupCopy\");",
							"if(tests[\"Response Body has newly created storage pool\"] = responseBody.has(\"storagePolicyName\"))",
							"{",
							"    console.log(\"The newly created storage pool is: \"+jsonData.archiveGroupCopy.storagePolicyName);",
							"    postman.setEnvironmentVariable(\"storagePoolName1\",jsonData.archiveGroupCopy.storagePolicyName);",
							"}",
							"if(tests[\"Response Body has id of the newly created storage pool.\"] = responseBody.has(\"storagePolicyId\"))",
							"{",
							"    console.log(\"The newly created storage pool's id is: \"+jsonData.archiveGroupCopy.storagePolicyId);",
							"    postman.setEnvironmentVariable(\"storagePoolId1\", jsonData.archiveGroupCopy.storagePolicyId);",
							"}",
							"if(tests[\"Response Body has newly create storage pool copy name\"] = responseBody.has(\"copyName\"))",
							"{",
							"    console.log(\"The newly created storage pool copy name is: \"+jsonData.archiveGroupCopy.copyName);",
							"    postman.setEnvironmentVariable(\"copyName\",jsonData.archiveGroupCopy.copyName);",
							"}",
							"",
							"if (tests[\"Response Body has id of newly create storage pool copy name\"] = responseBody.has(\"copyId\"))",
							"{",
							"    console.log(\"The id of the newly created storage pool copy is: \"+jsonData.archiveGroupCopy.copyId);",
							"    postman.setEnvironmentVariable(\"copyId\",jsonData.archiveGroupCopy.copyId);",
							"}",
							"tests[\"Response Body has an error code\"] = responseBody.has(\"errorCode\");",
							"tests[\"Response Body has an error code 0\"] = jsonData.error.errorCode === 0 ;",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var storagePolicyId = postman.getEnvironmentVariable(\"storagePolicyId\");",
							"postman.setEnvironmentVariable(\"storagePolicyId\",storagePolicyId);",
							"var storagePolicyName = postman.getEnvironmentVariable(\"storagePolicyName\");",
							"postman.setEnvironmentVariable(\"storagePolicyName\",storagePolicyName);",
							"var libraryId = postman.getEnvironmentVariable(\"libraryId\");",
							"postman.setEnvironmentVariable(\"libraryId\",libraryId);",
							"var libraryName = postman.getEnvironmentVariable(\"libraryName\");",
							"postman.setEnvironmentVariable(\"libraryName\",libraryName);",
							"var mediaAgentName = postman.getEnvironmentVariable(\"mediaAgentName\");",
							"postman.setEnvironmentVariable(\"mediaAgentName\",mediaAgentName);",
							"var mediaAgentId = postman.getEnvironmentVariable(\"mediaAgentId\");",
							"postman.setEnvironmentVariable(\"mediaAgentId\",mediaAgentId);",
							"var copyName = postman.setEnvironmentVariable(\"copyName\");",
							"postman.setEnvironmentVariable(\"copyName\",copyName);",
							"var copyId = postman.getEnvironmentVariable(\"copyId\");",
							"postman.setEnvironmentVariable(\"copyId\",copyId);",
							"postman.setEnvironmentVariable(\"path2\",\"C:\\\\\\\\StoragePool2\"+Date.now())",
							"var storagePoolName = \"NonDDStoragePoolForPlan\" + new Date().getTime();",
							"postman.setEnvironmentVariable(\"tempStoragePoolName\", storagePoolName);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"storagePolicyName\": \"{{tempStoragePoolName}}\",\r\n    \"type\": 1,\r\n    \"copyName\": \"testNonDedupe_Primary\",\r\n    \"numberOfCopies\": 1,\r\n    \"clientGroup\": {\r\n        \"_type_\": 28,\r\n        \"clientGroupId\": 0,\r\n        \"clientGroupName\": \"\"\r\n    },\r\n    \"storage\": [\r\n        {\r\n            \"path\": \"{{path2}}\",\r\n            \"mediaAgent\": {\r\n                \"mediaAgentId\": {{mediaAgentId}},\r\n                \"_type_\": 11,\r\n                \"mediaAgentName\": \"{{mediaAgentName}}\"\r\n            },\r\n            \"credentials\": {\r\n                \"userName\": \"\"\r\n            }\r\n        }\r\n    ],\r\n    \"storagePolicyCopyInfo\": {\r\n        \"copyType\": 1,\r\n        \"isFromGui\": true,\r\n        \"active\": 1,\r\n        \"isDefault\": 1,\r\n        \"numberOfStreamsToCombine\": 1,\r\n        \"storagePolicyFlags\": {\r\n            \"globalStoragePolicy\": 1\r\n        },\r\n        \"retentionRules\": {\r\n            \"retainBackupDataForCycles\": -1,\r\n            \"retainArchiverDataForDays\": -1,\r\n            \"retainBackupDataForDays\": -1,\r\n            \"retentionFlags\": {\r\n                \"enableDataAging\": 1\r\n            }\r\n        },\r\n        \"extendedFlags\": {\r\n            \"globalStoragePolicy\": 1\r\n        },\r\n        \"copyFlags\": {\r\n            \"preserveEncryptionModeAsInSource\": 1\r\n        },\r\n        \"library\": {\r\n            \"libraryName\": \"\",\r\n            \"_type_\": 9,\r\n            \"libraryId\": 0\r\n        },\r\n        \"mediaAgent\": {\r\n            \"mediaAgentId\": {{mediaAgentId}},\r\n            \"_type_\": 11,\r\n            \"mediaAgentName\": \"{{mediaAgentName}}\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/StoragePool?Action=create",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"StoragePool"
					],
					"query": [
						{
							"key": "Action",
							"value": "create"
						}
					]
				}
			},
			"response": [
				{
					"name": "Storage Pool17",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"storagePolicyName\": \"New Diksk SP\",\r\n  \"type\": 1,\r\n  \"copyName\": \"New Disk SP_Primary\",\r\n  \"numberOfCopies\": 1,\r\n  \"clientGroup\": {\r\n    \"_type_\": 28,\r\n    \"clientGroupId\": 0,\r\n    \"clientGroupName\": \"\"\r\n  },\r\n  \"storage\": [\r\n    {\r\n      \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"mediaAgent\": {\r\n        \"mediaAgentId\": 2,\r\n        \"_type_\": 11,\r\n        \"mediaAgentName\": \"S-200128-93-0\"\r\n      },\r\n      \"credentials\": {}\r\n    }\r\n  ],\r\n  \"storagePolicyCopyInfo\": {\r\n    \"copyType\": 1,\r\n    \"isFromGui\": true,\r\n    \"active\": 1,\r\n    \"isDefault\": 1,\r\n    \"numberOfStreamsToCombine\": 1,\r\n    \"dedupeFlags\": {\r\n      \"enableDASHFull\": 1,\r\n      \"hostGlobalDedupStore\": 1,\r\n      \"enableDeduplication\": 1\r\n    },\r\n    \"storagePolicyFlags\": {\r\n      \"blockLevelDedup\": 1,\r\n      \"enableGlobalDeduplication\": 1\r\n    },\r\n    \"DDBPartitionInfo\": {\r\n      \"maInfoList\": [\r\n        {\r\n          \"mediaAgent\": {\r\n            \"mediaAgentId\": 2,\r\n            \"_type_\": 11,\r\n            \"mediaAgentName\": \"S-200128-93-0\"\r\n          },\r\n          \"subStoreList\": [\r\n            {\r\n              \"diskFreeWarningThreshholdMB\": 10240,\r\n              \"diskFreeThresholdMB\": 5120,\r\n              \"accessPath\": {\r\n                \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\dgdb3\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"library\": {\r\n      \"libraryName\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"_type_\": 9,\r\n      \"libraryId\": 0\r\n    },\r\n    \"mediaAgent\": {\r\n      \"mediaAgentId\": 2,\r\n      \"_type_\": 11,\r\n      \"mediaAgentName\": \"S-200128-93-0\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{ServerURL}}/StoragePool?Action=create",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"StoragePool"
							],
							"query": [
								{
									"key": "Action",
									"value": "create"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Cache-Control",
							"value": "private"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "WEBSERVERCORE-FLAG",
							"value": "true"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "X-AspNet-Version",
							"value": "4.0.30319"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 13:02:21 GMT"
						}
					],
					"cookie": [],
					"body": "{\n    \"responseType\": 0,\n    \"archiveGroupCopy\": {\n        \"copyId\": 62,\n        \"_type_\": 18,\n        \"copyName\": \"New Disk SP_Primary\",\n        \"storagePolicyName\": \"New Diksk SP\",\n        \"storagePolicyId\": 63\n    },\n    \"error\": {\n        \"errorCode\": 0\n    }\n}"
				},
				{
					"name": "Storage Pool14",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authtoken",
								"value": "{{Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"storagePolicyName\": \"New Disk SP\",\r\n  \"type\": 1,\r\n  \"copyName\": \"New Disk SP_Primary\",\r\n  \"numberOfCopies\": 1,\r\n  \"clientGroup\": {\r\n    \"_type_\": 28,\r\n    \"clientGroupId\": 0,\r\n    \"clientGroupName\": \"\"\r\n  },\r\n  \"storage\": [\r\n    {\r\n      \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"mediaAgent\": {\r\n        \"mediaAgentId\": 2,\r\n        \"_type_\": 11,\r\n        \"mediaAgentName\": \"S-200128-93-0\"\r\n      },\r\n      \"credentials\": {}\r\n    }\r\n  ],\r\n  \"storagePolicyCopyInfo\": {\r\n    \"copyType\": 1,\r\n    \"isFromGui\": true,\r\n    \"active\": 1,\r\n    \"isDefault\": 1,\r\n    \"numberOfStreamsToCombine\": 1,\r\n    \"dedupeFlags\": {\r\n      \"enableDASHFull\": 1,\r\n      \"hostGlobalDedupStore\": 1,\r\n      \"enableDeduplication\": 1\r\n    },\r\n    \"storagePolicyFlags\": {\r\n      \"blockLevelDedup\": 1,\r\n      \"enableGlobalDeduplication\": 1\r\n    },\r\n    \"DDBPartitionInfo\": {\r\n      \"maInfoList\": [\r\n        {\r\n          \"mediaAgent\": {\r\n            \"mediaAgentId\": 2,\r\n            \"_type_\": 11,\r\n            \"mediaAgentName\": \"S-200128-93-0\"\r\n          },\r\n          \"subStoreList\": [\r\n            {\r\n              \"diskFreeWarningThreshholdMB\": 10240,\r\n              \"diskFreeThresholdMB\": 5120,\r\n              \"accessPath\": {\r\n                \"path\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\ddb3\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"library\": {\r\n      \"libraryName\": \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\lib\",\r\n      \"_type_\": 9,\r\n      \"libraryId\": 0\r\n    },\r\n    \"mediaAgent\": {\r\n      \"mediaAgentId\": 2,\r\n      \"_type_\": 11,\r\n      \"mediaAgentName\": \"S-200128-93-0\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{ServerURL}}/StoragePool?Action=create",
							"host": [
								"{{ServerURL}}"
							],
							"path": [
								"StoragePool"
							],
							"query": [
								{
									"key": "Action",
									"value": "create"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8"
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5"
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET"
						},
						{
							"key": "Date",
							"value": "Wed, 05 Feb 2020 08:41:53 GMT"
						},
						{
							"key": "Content-Length",
							"value": "181"
						}
					],
					"cookie": [],
					"body": "{\n    \"responseType\": 0,\n    \"archiveGroupCopy\": {\n        \"copyId\": 53,\n        \"_type_\": 18,\n        \"copyName\": \"New Disk SP_Primary\",\n        \"storagePolicyName\": \"New Disk SP\",\n        \"storagePolicyId\": 54\n    },\n    \"error\": {\n        \"errorCode\": 0\n    }\n}"
				}
			]
		},
		{
			"name": "GET Plan template JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var planName = \"NewManPlan\" + new Date().getTime();",
							"postman.setEnvironmentVariable(\"planName\", planName);",
							"jsonData.plan.summary['description'] = planName;",
							"jsonData.plan.summary.plan.planName = planName;",
							"jsonData.plan.summary['rpoInMinutes'] = 1440;",
							"jsonData.plan.storage.copy[0][\"useGlobalPolicy\"] =  {",
							"    \"storagePolicyName\": pm.environment.get(\"storagePoolName\"),",
							"    \"storagePolicyId\": parseInt(pm.environment.get(\"storagePoolId\"))",
							"}",
							"jsonData.plan.storage.copy[0][\"dedupeFlags\"][\"useGlobalDedupStore\"] = 1",
							"pm.environment.set(\"dedupeJSON\", JSON.stringify(jsonData));",
							"var jsonData = JSON.parse(responseBody);",
							"jsonData.plan.storage.copy[0][\"useGlobalPolicy\"] =  {",
							"    \"storagePolicyName\": pm.environment.get(\"storagePoolName1\"),",
							"    \"storagePolicyId\": parseInt(pm.environment.get(\"storagePoolId1\"))",
							"}",
							"delete jsonData.plan.storage.copy[0][\"storagePolicyFlags\"];",
							"delete jsonData.plan.storage.copy[0][\"dedupeFlags\"][\"enableDeduplication\"];",
							"delete jsonData.plan.storage.copy[0][\"dedupeFlags\"][\"enableClientSideDedup\"];",
							"delete jsonData.plan.storage.copy[0][\"dedupeFlags\"][\"useGlobalDedupStore\"];",
							"delete jsonData.plan.storage.copy[0][\"DDBPartitionInfo\"];",
							"jsonData.plan.storage.copy[0][\"extendedFlags\"] = {",
							"    \"useGlobalStoragePolicy\": 1",
							"}",
							"var planName = \"NewManNonDDPlan\" + new Date().getTime();",
							"postman.setEnvironmentVariable(\"planName\", planName);",
							"jsonData.plan.summary['rpoInMinutes'] = 1440;",
							"jsonData.plan.summary['description'] = planName;",
							"jsonData.plan.summary.plan.planName = planName;",
							"pm.environment.set(\"nonDedupeJSON\", JSON.stringify(jsonData));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/V2/Plan/template?type=MSP&subType=Server",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"V2",
						"Plan",
						"template"
					],
					"query": [
						{
							"key": "type",
							"value": "MSP"
						},
						{
							"key": "subType",
							"value": "Server"
						}
					]
				},
				"description": "<h2> Description </h2>\nThis operation returns a list of storage pools.\n\n[_More Details_](http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_storagepool.htm)"
			},
			"response": [
				{
					"name": "Storage Pool",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							},
							{
								"key": "Authtoken",
								"value": "{{TOKEN}}"
							}
						],
						"url": {
							"raw": "{{ServerUrl}}/StoragePool",
							"host": [
								"{{ServerUrl}}"
							],
							"path": [
								"StoragePool"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "xml",
					"header": [
						{
							"key": "Content-Length",
							"value": "439",
							"name": "Content-Length",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/xml; charset=utf-8",
							"name": "Content-Type",
							"description": ""
						},
						{
							"key": "Date",
							"value": "Wed, 14 Jun 2017 07:59:57 GMT",
							"name": "Date",
							"description": ""
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5",
							"name": "Server",
							"description": ""
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET",
							"name": "X-Powered-By",
							"description": ""
						}
					],
					"cookie": [],
					"body": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?><Api_GetStoragePoolListResp><storagePoolList numberOfNodes=\"1\" reserved1=\"1\" status=\"Online\" storagePoolType=\"1\" totalCapacity=\"214383292579\" totalFreeSpace=\"112571092828\"><storagePool _type_=\"28\" clientGroupId=\"13\" clientGroupName=\"TestStoragePool\"/><storagePoolEntity _type_=\"160\" storagePoolId=\"13\" storagePoolName=\"TestStoragePool\"/></storagePoolList></Api_GetStoragePoolListResp>"
				}
			]
		},
		{
			"name": "Dedupe Plan Creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"tests[\"Response Body contains securityAssociations\"] = responseBody.has(\"securityAssociations\");",
							"",
							"tests[\"Response Body contains plan\"] = responseBody.has(\"plan\");",
							"",
							"tests[\"Response Body contains planOwner\"] = responseBody.has(\"planOwner\");",
							"tests[\"Response Body contains errors\"] = responseBody.has(\"errors\");",
							"",
							"",
							"postman.setEnvironmentVariable(\"planId\", jsonData.plan.summary.plan.planId);",
							"postman.setEnvironmentVariable(\"planName\", jsonData.plan.summary.plan.planName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{dedupeJSON}}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan"
					]
				},
				"description": "<h2>Description</h2>\nThis operation creates a Plan."
			},
			"response": [
				{
					"name": "Default Server Plan With Secondary Storage Save Example",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Authtoken",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"plan\": {\n\t\t\"summary\": {\n\t\t\t\"slaInMinutes\": 240,\n\t\t\t\"description\": \"NewServerPlan\",\n\t\t\t\"restrictions\": 1,\n\t\t\t\"type\": 2,\n\t\t\t\"subtype\": 33554437,\n\t\t\t\"planOwner\": {\n\t\t\t\t\"userGUID\": \"9DEB87C3-6FED-4B7F-9CC9-241F337081CD\",\n\t\t\t\t\"userName\": \"admin\",\n\t\t\t\t\"userId\": 1\n\t\t\t},\n\t\t\t\"plan\": {\n\t\t\t\t\"planName\": \"NewServerPlan\"\n\t\t\t}\n\t\t},\n\t\t\"inheritance\": {\n\t\t\t\"isSealed\": true\n\t\t},\n\t\t\"storage\": {\n\t\t\t\"storagePolicy\": {},\n\t\t\t\"copy\": [\n\t\t\t\t{\n\t\t\t\t\t\"active\": 1,\n\t\t\t\t\t\"isDefault\": 1,\n\t\t\t\t\t\"dedupeFlags\": {\n\t\t\t\t\t\t\"enableDASHFull\": 1,\n\t\t\t\t\t\t\"useGlobalDedupStore\": 1,\n\t\t\t\t\t\t\"enableDeduplication\": 1,\n\t\t\t\t\t\t\"enableClientSideDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"storagePolicyFlags\": {\n\t\t\t\t\t\t\"blockLevelDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"retentionRules\": {\n\t\t\t\t\t\t\"retainBackupDataForDays\": 30,\n\t\t\t\t\t\t\"retentionFlags\": {\n\t\t\t\t\t\t\t\"enableDataAging\": 1\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"useGlobalPolicy\": {\n\t\t\t\t\t\t\"storagePolicyName\": \"NewStoragePool\",\n\t\t\t\t\t\t\"storagePolicyId\": 18\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"copyType\": 1,\n\t\t\t\t\t\"dedupeFlags\": {\n\t\t\t\t\t\t\"useGlobalDedupStore\": 1,\n\t\t\t\t\t\t\"enableDeduplication\": 1,\n\t\t\t\t\t\t\"enableClientSideDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"storagePolicyFlags\": {\n\t\t\t\t\t\t\"blockLevelDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"retentionRules\": {\n\t\t\t\t\t\t\"retainBackupDataForDays\": 30,\n\t\t\t\t\t\t\"retentionFlags\": {\n\t\t\t\t\t\t\t\"enableDataAging\": 1\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"useGlobalPolicy\": {\n\t\t\t\t\t\t\"storagePolicyName\": \"NewStoragePool2\",\n\t\t\t\t\t\t\"storagePolicyId\": 20\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"schedule\": {\n\t\t\t\"task\": {\n\t\t\t\t\"taskType\": 4,\n\t\t\t\t\"taskFlags\": {\n\t\t\t\t\t\"isEdgeDrive\": false,\n\t\t\t\t\t\"isEZOperation\": false,\n\t\t\t\t\t\"disabled\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"subTasks\": [\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Daily Incremental\",\n\t\t\t\t\t\t\"subTaskType\": 2,\n\t\t\t\t\t\t\"flags\": 65536,\n\t\t\t\t\t\t\"operationType\": 2,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 14400,\n\t\t\t\t\t\t\"freq_type\": 4,\n\t\t\t\t\t\t\"active_end_time\": 86340,\n\t\t\t\t\t\t\"active_start_time\": 0,\n\t\t\t\t\t\t\"freq_interval\": 1,\n\t\t\t\t\t\t\"name\": \"Daily Incremental\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 2,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": true,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"stopWinService\": true,\n\t\t\t\t\t\t\t\t\"stopDhcpService\": true,\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"optimizedBackup\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"bkpFilesProctedByFS\": true,\n\t\t\t\t\t\t\t\t\"granularrecovery\": true,\n\t\t\t\t\t\t\t\t\"verifySynthFull\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"nasOptions\": {\n\t\t\t\t\t\t\t\t\"snapShotType\": 0,\n\t\t\t\t\t\t\t\t\"backupQuotas\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"vaultTrackerOpt\": {\n\t\t\t\t\t\t\t\t\"mediaStatus\": {\n\t\t\t\t\t\t\t\t\t\"bad\": true,\n\t\t\t\t\t\t\t\t\t\"overwriteProtected\": true,\n\t\t\t\t\t\t\t\t\t\"full\": true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {\n\t\t\t\t\t\t\t\t\"numberofDays\": 30,\n\t\t\t\t\t\t\t\t\"retentionJobType\": 2,\n\t\t\t\t\t\t\t\t\"waitForInlineBackupResources\": true,\n\t\t\t\t\t\t\t\t\"allowOtherSchedulesToUseMediaSet\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"jobRetryOpts\": {\n\t\t\t\t\t\t\t\t\"runningTime\": {\n\t\t\t\t\t\t\t\t\t\"totalRunningTime\": 3600\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Last Saturday of the Month Regular Full\",\n\t\t\t\t\t\t\"subTaskType\": 2,\n\t\t\t\t\t\t\"flags\": 0,\n\t\t\t\t\t\t\"operationType\": 2,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 0,\n\t\t\t\t\t\t\"freq_type\": 32,\n\t\t\t\t\t\t\"active_start_time\": 72000,\n\t\t\t\t\t\t\"freq_interval\": 7,\n\t\t\t\t\t\t\"freq_relative_interval\": 5,\n\t\t\t\t\t\t\"name\": \"Last Saturday of the Month Regular Full\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1,\n\t\t\t\t\t\t\"daysToRun\": {\n\t\t\t\t\t\t\t\"week\": 5,\n\t\t\t\t\t\t\t\"day\": 7\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"truncateLogsOnSource\": false,\n\t\t\t\t\t\t\t\"sybaseSkipFullafterLogBkp\": false,\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 1,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"vsaBackupOptions\": {\n\t\t\t\t\t\t\t\t\"backupFailedVMsOnly\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": false,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"enforceTransactionLogUsage\": false,\n\t\t\t\t\t\t\t\t\"skipConsistencyCheck\": false,\n\t\t\t\t\t\t\t\t\"createNewIndex\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0,\n\t\t\t\t\t\t\t\t\"autoCopy\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"perfJobOpts\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Weekly Synthetic Fulls\",\n\t\t\t\t\t\t\"subTaskType\": 2,\n\t\t\t\t\t\t\"flags\": 0,\n\t\t\t\t\t\t\"operationType\": 2,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 0,\n\t\t\t\t\t\t\"freq_type\": 8,\n\t\t\t\t\t\t\"active_start_time\": 72000,\n\t\t\t\t\t\t\"freq_interval\": 32,\n\t\t\t\t\t\t\"name\": \"Weekly Synthetic Fulls\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1,\n\t\t\t\t\t\t\"daysToRun\": {\n\t\t\t\t\t\t\t\"Monday\": false,\n\t\t\t\t\t\t\t\"Thursday\": false,\n\t\t\t\t\t\t\t\"Friday\": true,\n\t\t\t\t\t\t\t\"Sunday\": false,\n\t\t\t\t\t\t\t\"Wednesday\": false,\n\t\t\t\t\t\t\t\"Tuesday\": false,\n\t\t\t\t\t\t\t\"Saturday\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"repeatPattern\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"exception\": true,\n\t\t\t\t\t\t\t\t\"onDay\": 64,\n\t\t\t\t\t\t\t\t\"occurrence\": 16\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"truncateLogsOnSource\": false,\n\t\t\t\t\t\t\t\"sybaseSkipFullafterLogBkp\": false,\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 4,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"vsaBackupOptions\": {\n\t\t\t\t\t\t\t\t\"backupFailedVMsOnly\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": false,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"enforceTransactionLogUsage\": false,\n\t\t\t\t\t\t\t\t\"skipConsistencyCheck\": false,\n\t\t\t\t\t\t\t\t\"createNewIndex\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0,\n\t\t\t\t\t\t\t\t\"autoCopy\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"perfJobOpts\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Daily aux copy\",\n\t\t\t\t\t\t\"subTaskType\": 1,\n\t\t\t\t\t\t\"flags\": 0,\n\t\t\t\t\t\t\"operationType\": 4003,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 1800,\n\t\t\t\t\t\t\"freq_type\": 4,\n\t\t\t\t\t\t\"active_end_time\": 86340,\n\t\t\t\t\t\t\"active_start_time\": 0,\n\t\t\t\t\t\t\"freq_interval\": 1,\n\t\t\t\t\t\t\"name\": \"Daily aux copy\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 2,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": true,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"stopWinService\": true,\n\t\t\t\t\t\t\t\t\"stopDhcpService\": true,\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"optimizedBackup\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"bkpFilesProctedByFS\": true,\n\t\t\t\t\t\t\t\t\"granularrecovery\": true,\n\t\t\t\t\t\t\t\t\"verifySynthFull\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"nasOptions\": {\n\t\t\t\t\t\t\t\t\"snapShotType\": 0,\n\t\t\t\t\t\t\t\t\"backupQuotas\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"vaultTrackerOpt\": {\n\t\t\t\t\t\t\t\t\"mediaStatus\": {\n\t\t\t\t\t\t\t\t\t\"bad\": true,\n\t\t\t\t\t\t\t\t\t\"overwriteProtected\": true,\n\t\t\t\t\t\t\t\t\t\"full\": true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {\n\t\t\t\t\t\t\t\t\"numberofDays\": 30,\n\t\t\t\t\t\t\t\t\"retentionJobType\": 2,\n\t\t\t\t\t\t\t\t\"waitForInlineBackupResources\": true,\n\t\t\t\t\t\t\t\t\"allowOtherSchedulesToUseMediaSet\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"jobRetryOpts\": {\n\t\t\t\t\t\t\t\t\"runningTime\": {\n\t\t\t\t\t\t\t\t\t\"totalRunningTime\": 3600\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"options\": {\n\t\t\t\"quota\": 0\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{ServerUrl}}/v2/Plan",
							"host": [
								"{{ServerUrl}}"
							],
							"path": [
								"v2",
								"Plan"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "11420",
							"name": "Content-Length",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8",
							"name": "Content-Type",
							"description": ""
						},
						{
							"key": "Date",
							"value": "Fri, 15 Sep 2017 17:42:05 GMT",
							"name": "Date",
							"description": ""
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5",
							"name": "Server",
							"description": ""
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET",
							"name": "X-Powered-By",
							"description": ""
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"httpOnly": true,
							"domain": "######",
							"path": "/webconsole",
							"secure": false,
							"value": "930C162901E43496C2ED776C7233E414",
							"key": "JSESSIONID"
						}
					],
					"body": "{\r\"plan\":{\r\"summary\":{\r\"slaInMinutes\":240,\"restrictions\":1,\"type\":2,\"planStatusFlag\":0,\"numDevices\":0,\"subtype\":33554437,\"numUsers\":0,\"permissions\":[\r{\r\"permissionId\":1\r},{\r\"permissionId\":2\r},{\r\"permissionId\":3\r},{\r\"permissionId\":4\r},{\r\"permissionId\":5\r},{\r\"permissionId\":6\r},{\r\"permissionId\":7\r},{\r\"permissionId\":8\r},{\r\"permissionId\":9\r},{\r\"permissionId\":10\r},{\r\"permissionId\":11\r},{\r\"permissionId\":12\r},{\r\"permissionId\":13\r},{\r\"permissionId\":15\r},{\r\"permissionId\":16\r},{\r\"permissionId\":18\r},{\r\"permissionId\":20\r},{\r\"permissionId\":22\r},{\r\"permissionId\":24\r},{\r\"permissionId\":25\r},{\r\"permissionId\":26\r},{\r\"permissionId\":27\r},{\r\"permissionId\":29\r},{\r\"permissionId\":31\r},{\r\"permissionId\":32\r},{\r\"permissionId\":33\r},{\r\"permissionId\":34\r},{\r\"permissionId\":35\r},{\r\"permissionId\":36\r},{\r\"permissionId\":38\r},{\r\"permissionId\":39\r},{\r\"permissionId\":40\r},{\r\"permissionId\":41\r},{\r\"permissionId\":42\r},{\r\"permissionId\":101\r},{\r\"permissionId\":102\r},{\r\"permissionId\":103\r},{\r\"permissionId\":107\r},{\r\"permissionId\":116\r},{\r\"permissionId\":117\r},{\r\"permissionId\":118\r},{\r\"permissionId\":134\r},{\r\"permissionId\":135\r},{\r\"permissionId\":136\r},{\r\"permissionId\":137\r},{\r\"permissionId\":139\r},{\r\"permissionId\":140\r},{\r\"permissionId\":142\r},{\r\"permissionId\":143\r},{\r\"permissionId\":145\r},{\r\"permissionId\":146\r},{\r\"permissionId\":147\r},{\r\"permissionId\":148\r},{\r\"permissionId\":149\r},{\r\"permissionId\":150\r},{\r\"permissionId\":157\r},{\r\"permissionId\":158\r},{\r\"permissionId\":159\r},{\r\"permissionId\":178\r},{\r\"permissionId\":215\r},{\r\"permissionId\":217\r},{\r\"permissionId\":178\r}\r],\"planOwner\":{\r\"_type_\":13,\"userName\":\"Administrator\",\"userId\":1\r},\"plan\":{\r\"_type_\":158,\"planName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"planId\":14\r}\r},\"definesStorage\":{\r\"definesEntity\":true,\"overrideEntity\":0\r},\"securityAssociations\":{\r\"associations\":[\r{\r\"userOrGroup\":[\r{\r\"userId\":1,\"_type_\":13,\"userName\":\"admin\"\r}\r],\"properties\":{\r\"isCreatorAssociation\":true,\"role\":{\r\"_type_\":120,\"roleId\":10,\"roleName\":\"Plan Creator Role\"\r}\r}\r}\r],\"ownerAssociations\":{\r\r}\r},\"featureInfo\":{\r\"edgedriveInfo\":{\r\r},\"definesEdgeDriveInfo\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"inheritance\":{\r\"isSealed\":true\r},\"storage\":{\r\"storagePolicy\":{\r\"storagePolicyName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"storagePolicyId\":27\r},\"copy\":[\r{\r\"copyType\":0,\"active\":1,\"isDefault\":1,\"copyPrecedence\":1,\"retentionRules\":{\r\"retainBackupDataForCycles\":1,\"jobs\":0,\"retainArchiverDataForDays\":0,\"retainBackupDataForDays\":30\r},\"StoragePolicyCopy\":{\r\"copyId\":29,\"copyName\":\"Primary\"\r},\"drivePool\":{\r\"drivePoolName\":\"DrivePool(greenvalley)7\",\"drivePoolId\":7\r},\"library\":{\r\"libraryName\":\"NewStoragePoolLibrary\",\"libraryId\":9\r},\"useGlobalPolicy\":{\r\"storagePolicyName\":\"NewStoragePool\",\"storagePolicyId\":18\r}\r},{\r\"copyType\":1,\"active\":1,\"isDefault\":0,\"copyPrecedence\":2,\"retentionRules\":{\r\"retainBackupDataForCycles\":1,\"jobs\":0,\"retainArchiverDataForDays\":0,\"retainBackupDataForDays\":30\r},\"StoragePolicyCopy\":{\r\"copyId\":30,\"copyName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732 synchronous copy\"\r},\"drivePool\":{\r\"drivePoolName\":\"DrivePool(greenvalley)8\",\"drivePoolId\":8\r},\"library\":{\r\"libraryName\":\"NewStoragePool2Library\",\"libraryId\":10\r},\"useGlobalPolicy\":{\r\"storagePolicyName\":\"NewStoragePool2\",\"storagePolicyId\":20\r}\r}\r]\r},\"definesSchedule\":{\r\"definesEntity\":true,\"overrideEntity\":0\r},\"laptop\":{\r\"features\":{\r\"categoryPermission\":{\r\r}\r},\"accessPolicies\":{\r\"categoryPermission\":{\r\r}\r},\"definesAccessPolicies\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"content\":{\r\"definesSubclientWin\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesSubclientMac\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesSubclientLin\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"users\":{\r\r},\"definesFeatures\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"alerts\":{\r\r},\"replicationTargets\":{\r\r},\"schedule\":{\r\"task\":{\r\"description\":\"\",\"ownerId\":1,\"runUserId\":1,\"taskType\":4,\"ownerName\":\"Administrator\",\"alertId\":0,\"GUID\":\"7966dbae-c5e9-4198-8a12-eb7486a72e4a\",\"policyType\":0,\"associatedObjects\":0,\"taskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"taskId\":497,\"securityAssociations\":{\r\"ownerAssociations\":{\r\r}\r},\"originalCC\":{\r\"commCellId\":2\r},\"taskSecurity\":{\r\"associatedUserGroups\":[\r{\r\"userGroupId\":1,\"_type_\":15,\"userGroupName\":\"master\"\r},{\r\"userGroupId\":3,\"_type_\":15,\"userGroupName\":\"View All\"\r}\r],\"ownerCapabilities\":{\r\r}\r},\"createAs\":{\r\"user\":{\r\"user\":{\r\"userName\":\"admin\",\"userId\":1\r}\r}\r},\"taskFlags\":{\r\"isEdgeDrive\":false,\"isEZOperation\":false,\"forDDB\":false,\"uninstalled\":false,\"isSystem\":false,\"disabled\":false\r},\"task\":{\r\"taskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"taskId\":497\r}\r},\"appGroup\":{\r\r},\"subTasks\":[\r{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"Daily Incremental\",\"subTaskType\":2,\"flags\":65536,\"operationType\":2,\"subTaskId\":506,\"subTask\":{\r\"subtaskId\":506,\"subtaskName\":\"Daily Incremental\"\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":14400,\"freq_type\":4,\"patternId\":83,\"flags\":0,\"description\":\"\",\"active_end_time\":86340,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":0,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":1,\"freq_relative_interval\":0,\"name\":\"Daily Incremental\",\"freq_recurrence_factor\":1,\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"bkpLatestVersion\":true,\"backupLevel\":2,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"cdrOptions\":{\r\"incremental\":true,\"dataVerificationOnly\":false,\"full\":false\r},\"dataOpt\":{\r\"stopWinService\":true,\"stopDhcpService\":true,\"useCatalogServer\":true,\"optimizedBackup\":true,\"followMountPoints\":true,\"bkpFilesProctedByFS\":true,\"granularrecovery\":true,\"verifySynthFull\":true,\"daysBetweenSyntheticBackup\":0\r},\"nasOptions\":{\r\"snapShotType\":0,\"backupQuotas\":true\r},\"vaultTrackerOpt\":{\r\"mediaStatus\":{\r\"bad\":true,\"overwriteProtected\":true,\"full\":true\r}\r},\"mediaOpt\":{\r\"numberofDays\":30,\"retentionJobType\":2,\"waitForInlineBackupResources\":true,\"allowOtherSchedulesToUseMediaSet\":true\r}\r},\"commonOpts\":{\r\"jobRetryOpts\":{\r\"runningTime\":{\r\"totalRunningTime\":3600\r}\r}\r}\r}\r},{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"Last Saturday of the Month Regular Full\",\"subTaskType\":2,\"flags\":0,\"operationType\":2,\"subTaskId\":507,\"subTask\":{\r\"subtaskId\":507,\"subtaskName\":\"Last Saturday of the Month Regular Full\"\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":0,\"freq_type\":32,\"patternId\":84,\"flags\":0,\"description\":\"\",\"active_end_time\":0,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":72000,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":7,\"freq_relative_interval\":5,\"name\":\"Last Saturday of the Month Regular Full\",\"freq_recurrence_factor\":1,\"daysToRun\":{\r\"week\":5,\"day\":7\r},\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"truncateLogsOnSource\":false,\"sybaseSkipFullafterLogBkp\":false,\"bkpLatestVersion\":true,\"backupLevel\":1,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"vsaBackupOptions\":{\r\"backupFailedVMsOnly\":false\r},\"cdrOptions\":{\r\"incremental\":false,\"dataVerificationOnly\":false,\"full\":true\r},\"dataOpt\":{\r\"useCatalogServer\":true,\"followMountPoints\":true,\"enforceTransactionLogUsage\":false,\"skipConsistencyCheck\":false,\"createNewIndex\":true,\"daysBetweenSyntheticBackup\":0,\"autoCopy\":false\r},\"mediaOpt\":{\r\r}\r},\"commonOpts\":{\r\"perfJobOpts\":{\r\r}\r}\r}\r},{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"Weekly Synthetic Fulls\",\"subTaskType\":2,\"flags\":0,\"operationType\":2,\"subTaskId\":508,\"subTask\":{\r\"subtaskId\":508,\"subtaskName\":\"Weekly Synthetic Fulls\"\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":0,\"freq_type\":8,\"patternId\":85,\"flags\":0,\"description\":\"\",\"active_end_time\":0,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":72000,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":32,\"freq_relative_interval\":0,\"name\":\"Weekly Synthetic Fulls\",\"freq_recurrence_factor\":1,\"daysToRun\":{\r\"week\":0,\"Friday\":true,\"day\":0\r},\"repeatPattern\":[\r{\r\"exception\":true,\"onDayNumber\":0,\"onDay\":64,\"description\":\"On Last - Saturday\",\"occurrence\":16,\"repeatOn\":0\r}\r],\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"truncateLogsOnSource\":false,\"sybaseSkipFullafterLogBkp\":false,\"bkpLatestVersion\":true,\"backupLevel\":4,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"vsaBackupOptions\":{\r\"backupFailedVMsOnly\":false\r},\"cdrOptions\":{\r\"incremental\":false,\"dataVerificationOnly\":false,\"full\":false\r},\"dataOpt\":{\r\"useCatalogServer\":true,\"followMountPoints\":true,\"enforceTransactionLogUsage\":false,\"skipConsistencyCheck\":false,\"createNewIndex\":true,\"daysBetweenSyntheticBackup\":0,\"autoCopy\":false\r},\"mediaOpt\":{\r\r}\r},\"commonOpts\":{\r\"perfJobOpts\":{\r\r}\r}\r}\r},{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732 aux copy\",\"subTaskType\":1,\"flags\":0,\"operationType\":4003,\"subTaskId\":509,\"subTask\":{\r\"subtaskId\":509,\"subtaskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732 aux copy\",\"taskId\":498\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":1800,\"freq_type\":4,\"patternId\":86,\"flags\":0,\"description\":\"\",\"active_end_time\":86340,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":0,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":1,\"freq_relative_interval\":0,\"name\":\"Daily aux copy\",\"freq_recurrence_factor\":1,\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"bkpLatestVersion\":true,\"backupLevel\":2,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"cdrOptions\":{\r\"incremental\":true,\"dataVerificationOnly\":false,\"full\":false\r},\"dataOpt\":{\r\"stopWinService\":true,\"stopDhcpService\":true,\"useCatalogServer\":true,\"optimizedBackup\":true,\"followMountPoints\":true,\"bkpFilesProctedByFS\":true,\"granularrecovery\":true,\"verifySynthFull\":true,\"daysBetweenSyntheticBackup\":0\r},\"nasOptions\":{\r\"snapShotType\":0,\"backupQuotas\":true\r},\"vaultTrackerOpt\":{\r\"mediaStatus\":{\r\"bad\":true,\"overwriteProtected\":true,\"full\":true\r}\r},\"mediaOpt\":{\r\"numberofDays\":30,\"retentionJobType\":2,\"waitForInlineBackupResources\":true,\"allowOtherSchedulesToUseMediaSet\":true\r}\r},\"commonOpts\":{\r\"jobRetryOpts\":{\r\"runningTime\":{\r\"totalRunningTime\":3600\r}\r}\r}\r}\r}\r]\r},\"database\":{\r\"slaInMinutes\":0,\"scheduleLog\":{\r\"task\":{\r\r}\r},\"storageLog\":{\r\"storagePolicy\":{\r\r}\r},\"definesScheduleLog\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesStorageLog\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"definesAlerts\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"eDiscoveryInfo\":{\r\"definesContentAnalyzerCloud\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesAnalyticsEngineCloud\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"options\":{\r\"forcedArchiving\":false,\"quota\":0\r},\"exchange\":{\r\"definesMBRetention\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesMBCleanup\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesMBArchiving\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesMBJournal\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"definition\":{\r\"possible\":[\r1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,65537,65538,65539,65540,65541\r],\"required\":[\r1,4\r]\r}\r},\"errors\":[\r{\r\"entity\":{\r\r},\"status\":{\r\"errorMessage\":\"\",\"errorCode\":0\r}\r}\r]\r}"
				}
			]
		},
		{
			"name": "nonDedupe Plan Creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"tests[\"Response Body contains securityAssociations\"] = responseBody.has(\"securityAssociations\");",
							"",
							"tests[\"Response Body contains plan\"] = responseBody.has(\"plan\");",
							"",
							"tests[\"Response Body contains planOwner\"] = responseBody.has(\"planOwner\");",
							"tests[\"Response Body contains errors\"] = responseBody.has(\"errors\");",
							"",
							"",
							"postman.setEnvironmentVariable(\"planId1\", jsonData.plan.summary.plan.planId);",
							"postman.setEnvironmentVariable(\"planName1\", jsonData.plan.summary.plan.planName);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{nonDedupeJSON}}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan"
					]
				},
				"description": "<h2>Description</h2>\nThis operation creates a Plan."
			},
			"response": [
				{
					"name": "Default Server Plan With Secondary Storage Save Example",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Authtoken",
								"value": "{{TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"plan\": {\n\t\t\"summary\": {\n\t\t\t\"slaInMinutes\": 240,\n\t\t\t\"description\": \"NewServerPlan\",\n\t\t\t\"restrictions\": 1,\n\t\t\t\"type\": 2,\n\t\t\t\"subtype\": 33554437,\n\t\t\t\"planOwner\": {\n\t\t\t\t\"userGUID\": \"9DEB87C3-6FED-4B7F-9CC9-241F337081CD\",\n\t\t\t\t\"userName\": \"admin\",\n\t\t\t\t\"userId\": 1\n\t\t\t},\n\t\t\t\"plan\": {\n\t\t\t\t\"planName\": \"NewServerPlan\"\n\t\t\t}\n\t\t},\n\t\t\"inheritance\": {\n\t\t\t\"isSealed\": true\n\t\t},\n\t\t\"storage\": {\n\t\t\t\"storagePolicy\": {},\n\t\t\t\"copy\": [\n\t\t\t\t{\n\t\t\t\t\t\"active\": 1,\n\t\t\t\t\t\"isDefault\": 1,\n\t\t\t\t\t\"dedupeFlags\": {\n\t\t\t\t\t\t\"enableDASHFull\": 1,\n\t\t\t\t\t\t\"useGlobalDedupStore\": 1,\n\t\t\t\t\t\t\"enableDeduplication\": 1,\n\t\t\t\t\t\t\"enableClientSideDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"storagePolicyFlags\": {\n\t\t\t\t\t\t\"blockLevelDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"retentionRules\": {\n\t\t\t\t\t\t\"retainBackupDataForDays\": 30,\n\t\t\t\t\t\t\"retentionFlags\": {\n\t\t\t\t\t\t\t\"enableDataAging\": 1\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"useGlobalPolicy\": {\n\t\t\t\t\t\t\"storagePolicyName\": \"NewStoragePool\",\n\t\t\t\t\t\t\"storagePolicyId\": 18\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"copyType\": 1,\n\t\t\t\t\t\"dedupeFlags\": {\n\t\t\t\t\t\t\"useGlobalDedupStore\": 1,\n\t\t\t\t\t\t\"enableDeduplication\": 1,\n\t\t\t\t\t\t\"enableClientSideDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"storagePolicyFlags\": {\n\t\t\t\t\t\t\"blockLevelDedup\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"retentionRules\": {\n\t\t\t\t\t\t\"retainBackupDataForDays\": 30,\n\t\t\t\t\t\t\"retentionFlags\": {\n\t\t\t\t\t\t\t\"enableDataAging\": 1\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"useGlobalPolicy\": {\n\t\t\t\t\t\t\"storagePolicyName\": \"NewStoragePool2\",\n\t\t\t\t\t\t\"storagePolicyId\": 20\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"schedule\": {\n\t\t\t\"task\": {\n\t\t\t\t\"taskType\": 4,\n\t\t\t\t\"taskFlags\": {\n\t\t\t\t\t\"isEdgeDrive\": false,\n\t\t\t\t\t\"isEZOperation\": false,\n\t\t\t\t\t\"disabled\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"subTasks\": [\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Daily Incremental\",\n\t\t\t\t\t\t\"subTaskType\": 2,\n\t\t\t\t\t\t\"flags\": 65536,\n\t\t\t\t\t\t\"operationType\": 2,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 14400,\n\t\t\t\t\t\t\"freq_type\": 4,\n\t\t\t\t\t\t\"active_end_time\": 86340,\n\t\t\t\t\t\t\"active_start_time\": 0,\n\t\t\t\t\t\t\"freq_interval\": 1,\n\t\t\t\t\t\t\"name\": \"Daily Incremental\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 2,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": true,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"stopWinService\": true,\n\t\t\t\t\t\t\t\t\"stopDhcpService\": true,\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"optimizedBackup\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"bkpFilesProctedByFS\": true,\n\t\t\t\t\t\t\t\t\"granularrecovery\": true,\n\t\t\t\t\t\t\t\t\"verifySynthFull\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"nasOptions\": {\n\t\t\t\t\t\t\t\t\"snapShotType\": 0,\n\t\t\t\t\t\t\t\t\"backupQuotas\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"vaultTrackerOpt\": {\n\t\t\t\t\t\t\t\t\"mediaStatus\": {\n\t\t\t\t\t\t\t\t\t\"bad\": true,\n\t\t\t\t\t\t\t\t\t\"overwriteProtected\": true,\n\t\t\t\t\t\t\t\t\t\"full\": true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {\n\t\t\t\t\t\t\t\t\"numberofDays\": 30,\n\t\t\t\t\t\t\t\t\"retentionJobType\": 2,\n\t\t\t\t\t\t\t\t\"waitForInlineBackupResources\": true,\n\t\t\t\t\t\t\t\t\"allowOtherSchedulesToUseMediaSet\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"jobRetryOpts\": {\n\t\t\t\t\t\t\t\t\"runningTime\": {\n\t\t\t\t\t\t\t\t\t\"totalRunningTime\": 3600\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Last Saturday of the Month Regular Full\",\n\t\t\t\t\t\t\"subTaskType\": 2,\n\t\t\t\t\t\t\"flags\": 0,\n\t\t\t\t\t\t\"operationType\": 2,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 0,\n\t\t\t\t\t\t\"freq_type\": 32,\n\t\t\t\t\t\t\"active_start_time\": 72000,\n\t\t\t\t\t\t\"freq_interval\": 7,\n\t\t\t\t\t\t\"freq_relative_interval\": 5,\n\t\t\t\t\t\t\"name\": \"Last Saturday of the Month Regular Full\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1,\n\t\t\t\t\t\t\"daysToRun\": {\n\t\t\t\t\t\t\t\"week\": 5,\n\t\t\t\t\t\t\t\"day\": 7\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"truncateLogsOnSource\": false,\n\t\t\t\t\t\t\t\"sybaseSkipFullafterLogBkp\": false,\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 1,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"vsaBackupOptions\": {\n\t\t\t\t\t\t\t\t\"backupFailedVMsOnly\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": false,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"enforceTransactionLogUsage\": false,\n\t\t\t\t\t\t\t\t\"skipConsistencyCheck\": false,\n\t\t\t\t\t\t\t\t\"createNewIndex\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0,\n\t\t\t\t\t\t\t\t\"autoCopy\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"perfJobOpts\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Weekly Synthetic Fulls\",\n\t\t\t\t\t\t\"subTaskType\": 2,\n\t\t\t\t\t\t\"flags\": 0,\n\t\t\t\t\t\t\"operationType\": 2,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 0,\n\t\t\t\t\t\t\"freq_type\": 8,\n\t\t\t\t\t\t\"active_start_time\": 72000,\n\t\t\t\t\t\t\"freq_interval\": 32,\n\t\t\t\t\t\t\"name\": \"Weekly Synthetic Fulls\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1,\n\t\t\t\t\t\t\"daysToRun\": {\n\t\t\t\t\t\t\t\"Monday\": false,\n\t\t\t\t\t\t\t\"Thursday\": false,\n\t\t\t\t\t\t\t\"Friday\": true,\n\t\t\t\t\t\t\t\"Sunday\": false,\n\t\t\t\t\t\t\t\"Wednesday\": false,\n\t\t\t\t\t\t\t\"Tuesday\": false,\n\t\t\t\t\t\t\t\"Saturday\": false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"repeatPattern\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"exception\": true,\n\t\t\t\t\t\t\t\t\"onDay\": 64,\n\t\t\t\t\t\t\t\t\"occurrence\": 16\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"truncateLogsOnSource\": false,\n\t\t\t\t\t\t\t\"sybaseSkipFullafterLogBkp\": false,\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 4,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"vsaBackupOptions\": {\n\t\t\t\t\t\t\t\t\"backupFailedVMsOnly\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": false,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"enforceTransactionLogUsage\": false,\n\t\t\t\t\t\t\t\t\"skipConsistencyCheck\": false,\n\t\t\t\t\t\t\t\t\"createNewIndex\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0,\n\t\t\t\t\t\t\t\t\"autoCopy\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"perfJobOpts\": {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"subTask\": {\n\t\t\t\t\t\t\"subTaskName\": \"Daily aux copy\",\n\t\t\t\t\t\t\"subTaskType\": 1,\n\t\t\t\t\t\t\"flags\": 0,\n\t\t\t\t\t\t\"operationType\": 4003,\n\t\t\t\t\t\t\"subTaskId\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"pattern\": {\n\t\t\t\t\t\t\"freq_subday_interval\": 1800,\n\t\t\t\t\t\t\"freq_type\": 4,\n\t\t\t\t\t\t\"active_end_time\": 86340,\n\t\t\t\t\t\t\"active_start_time\": 0,\n\t\t\t\t\t\t\"freq_interval\": 1,\n\t\t\t\t\t\t\"name\": \"Daily aux copy\",\n\t\t\t\t\t\t\"freq_recurrence_factor\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"backupOpts\": {\n\t\t\t\t\t\t\t\"bkpLatestVersion\": true,\n\t\t\t\t\t\t\t\"backupLevel\": 2,\n\t\t\t\t\t\t\t\"incLevel\": 1,\n\t\t\t\t\t\t\t\"runIncrementalBackup\": true,\n\t\t\t\t\t\t\t\"doNotTruncateLog\": false,\n\t\t\t\t\t\t\t\"cdrOptions\": {\n\t\t\t\t\t\t\t\t\"incremental\": true,\n\t\t\t\t\t\t\t\t\"dataVerificationOnly\": false,\n\t\t\t\t\t\t\t\t\"full\": false\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"dataOpt\": {\n\t\t\t\t\t\t\t\t\"stopWinService\": true,\n\t\t\t\t\t\t\t\t\"stopDhcpService\": true,\n\t\t\t\t\t\t\t\t\"useCatalogServer\": true,\n\t\t\t\t\t\t\t\t\"optimizedBackup\": true,\n\t\t\t\t\t\t\t\t\"followMountPoints\": true,\n\t\t\t\t\t\t\t\t\"bkpFilesProctedByFS\": true,\n\t\t\t\t\t\t\t\t\"granularrecovery\": true,\n\t\t\t\t\t\t\t\t\"verifySynthFull\": true,\n\t\t\t\t\t\t\t\t\"daysBetweenSyntheticBackup\": 0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"nasOptions\": {\n\t\t\t\t\t\t\t\t\"snapShotType\": 0,\n\t\t\t\t\t\t\t\t\"backupQuotas\": true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"vaultTrackerOpt\": {\n\t\t\t\t\t\t\t\t\"mediaStatus\": {\n\t\t\t\t\t\t\t\t\t\"bad\": true,\n\t\t\t\t\t\t\t\t\t\"overwriteProtected\": true,\n\t\t\t\t\t\t\t\t\t\"full\": true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"mediaOpt\": {\n\t\t\t\t\t\t\t\t\"numberofDays\": 30,\n\t\t\t\t\t\t\t\t\"retentionJobType\": 2,\n\t\t\t\t\t\t\t\t\"waitForInlineBackupResources\": true,\n\t\t\t\t\t\t\t\t\"allowOtherSchedulesToUseMediaSet\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"commonOpts\": {\n\t\t\t\t\t\t\t\"jobRetryOpts\": {\n\t\t\t\t\t\t\t\t\"runningTime\": {\n\t\t\t\t\t\t\t\t\t\"totalRunningTime\": 3600\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t\"options\": {\n\t\t\t\"quota\": 0\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{ServerUrl}}/v2/Plan",
							"host": [
								"{{ServerUrl}}"
							],
							"path": [
								"v2",
								"Plan"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "11420",
							"name": "Content-Length",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8",
							"name": "Content-Type",
							"description": ""
						},
						{
							"key": "Date",
							"value": "Fri, 15 Sep 2017 17:42:05 GMT",
							"name": "Date",
							"description": ""
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5",
							"name": "Server",
							"description": ""
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET",
							"name": "X-Powered-By",
							"description": ""
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"httpOnly": true,
							"domain": "######",
							"path": "/webconsole",
							"secure": false,
							"value": "930C162901E43496C2ED776C7233E414",
							"key": "JSESSIONID"
						}
					],
					"body": "{\r\"plan\":{\r\"summary\":{\r\"slaInMinutes\":240,\"restrictions\":1,\"type\":2,\"planStatusFlag\":0,\"numDevices\":0,\"subtype\":33554437,\"numUsers\":0,\"permissions\":[\r{\r\"permissionId\":1\r},{\r\"permissionId\":2\r},{\r\"permissionId\":3\r},{\r\"permissionId\":4\r},{\r\"permissionId\":5\r},{\r\"permissionId\":6\r},{\r\"permissionId\":7\r},{\r\"permissionId\":8\r},{\r\"permissionId\":9\r},{\r\"permissionId\":10\r},{\r\"permissionId\":11\r},{\r\"permissionId\":12\r},{\r\"permissionId\":13\r},{\r\"permissionId\":15\r},{\r\"permissionId\":16\r},{\r\"permissionId\":18\r},{\r\"permissionId\":20\r},{\r\"permissionId\":22\r},{\r\"permissionId\":24\r},{\r\"permissionId\":25\r},{\r\"permissionId\":26\r},{\r\"permissionId\":27\r},{\r\"permissionId\":29\r},{\r\"permissionId\":31\r},{\r\"permissionId\":32\r},{\r\"permissionId\":33\r},{\r\"permissionId\":34\r},{\r\"permissionId\":35\r},{\r\"permissionId\":36\r},{\r\"permissionId\":38\r},{\r\"permissionId\":39\r},{\r\"permissionId\":40\r},{\r\"permissionId\":41\r},{\r\"permissionId\":42\r},{\r\"permissionId\":101\r},{\r\"permissionId\":102\r},{\r\"permissionId\":103\r},{\r\"permissionId\":107\r},{\r\"permissionId\":116\r},{\r\"permissionId\":117\r},{\r\"permissionId\":118\r},{\r\"permissionId\":134\r},{\r\"permissionId\":135\r},{\r\"permissionId\":136\r},{\r\"permissionId\":137\r},{\r\"permissionId\":139\r},{\r\"permissionId\":140\r},{\r\"permissionId\":142\r},{\r\"permissionId\":143\r},{\r\"permissionId\":145\r},{\r\"permissionId\":146\r},{\r\"permissionId\":147\r},{\r\"permissionId\":148\r},{\r\"permissionId\":149\r},{\r\"permissionId\":150\r},{\r\"permissionId\":157\r},{\r\"permissionId\":158\r},{\r\"permissionId\":159\r},{\r\"permissionId\":178\r},{\r\"permissionId\":215\r},{\r\"permissionId\":217\r},{\r\"permissionId\":178\r}\r],\"planOwner\":{\r\"_type_\":13,\"userName\":\"Administrator\",\"userId\":1\r},\"plan\":{\r\"_type_\":158,\"planName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"planId\":14\r}\r},\"definesStorage\":{\r\"definesEntity\":true,\"overrideEntity\":0\r},\"securityAssociations\":{\r\"associations\":[\r{\r\"userOrGroup\":[\r{\r\"userId\":1,\"_type_\":13,\"userName\":\"admin\"\r}\r],\"properties\":{\r\"isCreatorAssociation\":true,\"role\":{\r\"_type_\":120,\"roleId\":10,\"roleName\":\"Plan Creator Role\"\r}\r}\r}\r],\"ownerAssociations\":{\r\r}\r},\"featureInfo\":{\r\"edgedriveInfo\":{\r\r},\"definesEdgeDriveInfo\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"inheritance\":{\r\"isSealed\":true\r},\"storage\":{\r\"storagePolicy\":{\r\"storagePolicyName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"storagePolicyId\":27\r},\"copy\":[\r{\r\"copyType\":0,\"active\":1,\"isDefault\":1,\"copyPrecedence\":1,\"retentionRules\":{\r\"retainBackupDataForCycles\":1,\"jobs\":0,\"retainArchiverDataForDays\":0,\"retainBackupDataForDays\":30\r},\"StoragePolicyCopy\":{\r\"copyId\":29,\"copyName\":\"Primary\"\r},\"drivePool\":{\r\"drivePoolName\":\"DrivePool(greenvalley)7\",\"drivePoolId\":7\r},\"library\":{\r\"libraryName\":\"NewStoragePoolLibrary\",\"libraryId\":9\r},\"useGlobalPolicy\":{\r\"storagePolicyName\":\"NewStoragePool\",\"storagePolicyId\":18\r}\r},{\r\"copyType\":1,\"active\":1,\"isDefault\":0,\"copyPrecedence\":2,\"retentionRules\":{\r\"retainBackupDataForCycles\":1,\"jobs\":0,\"retainArchiverDataForDays\":0,\"retainBackupDataForDays\":30\r},\"StoragePolicyCopy\":{\r\"copyId\":30,\"copyName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732 synchronous copy\"\r},\"drivePool\":{\r\"drivePoolName\":\"DrivePool(greenvalley)8\",\"drivePoolId\":8\r},\"library\":{\r\"libraryName\":\"NewStoragePool2Library\",\"libraryId\":10\r},\"useGlobalPolicy\":{\r\"storagePolicyName\":\"NewStoragePool2\",\"storagePolicyId\":20\r}\r}\r]\r},\"definesSchedule\":{\r\"definesEntity\":true,\"overrideEntity\":0\r},\"laptop\":{\r\"features\":{\r\"categoryPermission\":{\r\r}\r},\"accessPolicies\":{\r\"categoryPermission\":{\r\r}\r},\"definesAccessPolicies\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"content\":{\r\"definesSubclientWin\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesSubclientMac\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesSubclientLin\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"users\":{\r\r},\"definesFeatures\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"alerts\":{\r\r},\"replicationTargets\":{\r\r},\"schedule\":{\r\"task\":{\r\"description\":\"\",\"ownerId\":1,\"runUserId\":1,\"taskType\":4,\"ownerName\":\"Administrator\",\"alertId\":0,\"GUID\":\"7966dbae-c5e9-4198-8a12-eb7486a72e4a\",\"policyType\":0,\"associatedObjects\":0,\"taskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"taskId\":497,\"securityAssociations\":{\r\"ownerAssociations\":{\r\r}\r},\"originalCC\":{\r\"commCellId\":2\r},\"taskSecurity\":{\r\"associatedUserGroups\":[\r{\r\"userGroupId\":1,\"_type_\":15,\"userGroupName\":\"master\"\r},{\r\"userGroupId\":3,\"_type_\":15,\"userGroupName\":\"View All\"\r}\r],\"ownerCapabilities\":{\r\r}\r},\"createAs\":{\r\"user\":{\r\"user\":{\r\"userName\":\"admin\",\"userId\":1\r}\r}\r},\"taskFlags\":{\r\"isEdgeDrive\":false,\"isEZOperation\":false,\"forDDB\":false,\"uninstalled\":false,\"isSystem\":false,\"disabled\":false\r},\"task\":{\r\"taskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732\",\"taskId\":497\r}\r},\"appGroup\":{\r\r},\"subTasks\":[\r{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"Daily Incremental\",\"subTaskType\":2,\"flags\":65536,\"operationType\":2,\"subTaskId\":506,\"subTask\":{\r\"subtaskId\":506,\"subtaskName\":\"Daily Incremental\"\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":14400,\"freq_type\":4,\"patternId\":83,\"flags\":0,\"description\":\"\",\"active_end_time\":86340,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":0,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":1,\"freq_relative_interval\":0,\"name\":\"Daily Incremental\",\"freq_recurrence_factor\":1,\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"bkpLatestVersion\":true,\"backupLevel\":2,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"cdrOptions\":{\r\"incremental\":true,\"dataVerificationOnly\":false,\"full\":false\r},\"dataOpt\":{\r\"stopWinService\":true,\"stopDhcpService\":true,\"useCatalogServer\":true,\"optimizedBackup\":true,\"followMountPoints\":true,\"bkpFilesProctedByFS\":true,\"granularrecovery\":true,\"verifySynthFull\":true,\"daysBetweenSyntheticBackup\":0\r},\"nasOptions\":{\r\"snapShotType\":0,\"backupQuotas\":true\r},\"vaultTrackerOpt\":{\r\"mediaStatus\":{\r\"bad\":true,\"overwriteProtected\":true,\"full\":true\r}\r},\"mediaOpt\":{\r\"numberofDays\":30,\"retentionJobType\":2,\"waitForInlineBackupResources\":true,\"allowOtherSchedulesToUseMediaSet\":true\r}\r},\"commonOpts\":{\r\"jobRetryOpts\":{\r\"runningTime\":{\r\"totalRunningTime\":3600\r}\r}\r}\r}\r},{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"Last Saturday of the Month Regular Full\",\"subTaskType\":2,\"flags\":0,\"operationType\":2,\"subTaskId\":507,\"subTask\":{\r\"subtaskId\":507,\"subtaskName\":\"Last Saturday of the Month Regular Full\"\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":0,\"freq_type\":32,\"patternId\":84,\"flags\":0,\"description\":\"\",\"active_end_time\":0,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":72000,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":7,\"freq_relative_interval\":5,\"name\":\"Last Saturday of the Month Regular Full\",\"freq_recurrence_factor\":1,\"daysToRun\":{\r\"week\":5,\"day\":7\r},\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"truncateLogsOnSource\":false,\"sybaseSkipFullafterLogBkp\":false,\"bkpLatestVersion\":true,\"backupLevel\":1,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"vsaBackupOptions\":{\r\"backupFailedVMsOnly\":false\r},\"cdrOptions\":{\r\"incremental\":false,\"dataVerificationOnly\":false,\"full\":true\r},\"dataOpt\":{\r\"useCatalogServer\":true,\"followMountPoints\":true,\"enforceTransactionLogUsage\":false,\"skipConsistencyCheck\":false,\"createNewIndex\":true,\"daysBetweenSyntheticBackup\":0,\"autoCopy\":false\r},\"mediaOpt\":{\r\r}\r},\"commonOpts\":{\r\"perfJobOpts\":{\r\r}\r}\r}\r},{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"Weekly Synthetic Fulls\",\"subTaskType\":2,\"flags\":0,\"operationType\":2,\"subTaskId\":508,\"subTask\":{\r\"subtaskId\":508,\"subtaskName\":\"Weekly Synthetic Fulls\"\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":0,\"freq_type\":8,\"patternId\":85,\"flags\":0,\"description\":\"\",\"active_end_time\":0,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":72000,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":32,\"freq_relative_interval\":0,\"name\":\"Weekly Synthetic Fulls\",\"freq_recurrence_factor\":1,\"daysToRun\":{\r\"week\":0,\"Friday\":true,\"day\":0\r},\"repeatPattern\":[\r{\r\"exception\":true,\"onDayNumber\":0,\"onDay\":64,\"description\":\"On Last - Saturday\",\"occurrence\":16,\"repeatOn\":0\r}\r],\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"truncateLogsOnSource\":false,\"sybaseSkipFullafterLogBkp\":false,\"bkpLatestVersion\":true,\"backupLevel\":4,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"vsaBackupOptions\":{\r\"backupFailedVMsOnly\":false\r},\"cdrOptions\":{\r\"incremental\":false,\"dataVerificationOnly\":false,\"full\":false\r},\"dataOpt\":{\r\"useCatalogServer\":true,\"followMountPoints\":true,\"enforceTransactionLogUsage\":false,\"skipConsistencyCheck\":false,\"createNewIndex\":true,\"daysBetweenSyntheticBackup\":0,\"autoCopy\":false\r},\"mediaOpt\":{\r\r}\r},\"commonOpts\":{\r\"perfJobOpts\":{\r\r}\r}\r}\r},{\r\"subTask\":{\r\"subTaskOrder\":0,\"subTaskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732 aux copy\",\"subTaskType\":1,\"flags\":0,\"operationType\":4003,\"subTaskId\":509,\"subTask\":{\r\"subtaskId\":509,\"subtaskName\":\"4304759e-ac1f-4d82-8879-abe6cadfb732 aux copy\",\"taskId\":498\r}\r},\"pattern\":{\r\"active_end_occurence\":0,\"freq_subday_interval\":1800,\"freq_type\":4,\"patternId\":86,\"flags\":0,\"description\":\"\",\"active_end_time\":86340,\"active_end_date\":0,\"skipOccurence\":0,\"skipDayNumber\":0,\"active_start_time\":0,\"freq_restart_interval\":0,\"active_start_date\":1505433600,\"freq_interval\":1,\"freq_relative_interval\":0,\"name\":\"Daily aux copy\",\"freq_recurrence_factor\":1,\"calendar\":{\r\"calendarName\":\"Standard\",\"calendarId\":1\r},\"timeZone\":{\r\"TimeZoneID\":1000\r}\r},\"options\":{\r\"backupOpts\":{\r\"bkpLatestVersion\":true,\"backupLevel\":2,\"incLevel\":1,\"runIncrementalBackup\":true,\"doNotTruncateLog\":false,\"cdrOptions\":{\r\"incremental\":true,\"dataVerificationOnly\":false,\"full\":false\r},\"dataOpt\":{\r\"stopWinService\":true,\"stopDhcpService\":true,\"useCatalogServer\":true,\"optimizedBackup\":true,\"followMountPoints\":true,\"bkpFilesProctedByFS\":true,\"granularrecovery\":true,\"verifySynthFull\":true,\"daysBetweenSyntheticBackup\":0\r},\"nasOptions\":{\r\"snapShotType\":0,\"backupQuotas\":true\r},\"vaultTrackerOpt\":{\r\"mediaStatus\":{\r\"bad\":true,\"overwriteProtected\":true,\"full\":true\r}\r},\"mediaOpt\":{\r\"numberofDays\":30,\"retentionJobType\":2,\"waitForInlineBackupResources\":true,\"allowOtherSchedulesToUseMediaSet\":true\r}\r},\"commonOpts\":{\r\"jobRetryOpts\":{\r\"runningTime\":{\r\"totalRunningTime\":3600\r}\r}\r}\r}\r}\r]\r},\"database\":{\r\"slaInMinutes\":0,\"scheduleLog\":{\r\"task\":{\r\r}\r},\"storageLog\":{\r\"storagePolicy\":{\r\r}\r},\"definesScheduleLog\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesStorageLog\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"definesAlerts\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"eDiscoveryInfo\":{\r\"definesContentAnalyzerCloud\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesAnalyticsEngineCloud\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"options\":{\r\"forcedArchiving\":false,\"quota\":0\r},\"exchange\":{\r\"definesMBRetention\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesMBCleanup\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesMBArchiving\":{\r\"definesEntity\":false,\"overrideEntity\":0\r},\"definesMBJournal\":{\r\"definesEntity\":false,\"overrideEntity\":0\r}\r},\"definition\":{\r\"possible\":[\r1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,65537,65538,65539,65540,65541\r],\"required\":[\r1,4\r]\r}\r},\"errors\":[\r{\r\"entity\":{\r\r},\"status\":{\r\"errorMessage\":\"\",\"errorCode\":0\r}\r}\r]\r}"
				}
			]
		},
		{
			"name": "GET Plans",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"checkForPlan = false;",
							"",
							"for (i = 0; i < jsonData.plans.length; i++) {",
							"    if(jsonData.plans[i].plan.planId == postman.getEnvironmentVariable(\"planId\")) {",
							"        checkForPlan = true;",
							"        break;",
							"    }    //validate subclients id",
							"}",
							"",
							"if(tests[\"Input Plan exists in the JSON\"] = checkForPlan);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plans details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"if((tests[\"Validating securityAssociations tag\"] = responseBody.has(\"securityAssociations\")))      ",
							"            console.log(\"securityAssociations tag is present\");",
							"            ",
							"if((tests[\"Validating inheritance tag\"] = responseBody.has(\"inheritance\")))      ",
							"            console.log(\"inheritance tag is present\");",
							"            ",
							"if((tests[\"Validating storage tag\"] = responseBody.has(\"storage\")))      ",
							"            console.log(\"storage tag is present\");",
							"            ",
							"if((tests[\"Validating slaInMinutes tag\"] = responseBody.has(\"slaInMinutes\")))      ",
							"            console.log(\"slaInMinutes tag is present\");",
							"            ",
							"if((tests[\"Validating planOwner tag\"] = responseBody.has(\"planOwner\")))      ",
							"            console.log(\"planOwner tag is present\");",
							"            ",
							"if((tests[\"Validating schedule tag\"] = responseBody.has(\"schedule\")))      ",
							"            console.log(\"schedule tag is present\");",
							"            ",
							"if((tests[\"Validating storagePolicyId tag\"] = responseBody.has(\"storagePolicyId\")))      ",
							"            console.log(\"storagePolicyId tag is present\");",
							"            ",
							"if((tests[\"Validating operationWindow tag\"] = responseBody.has(\"operationWindow\")))      ",
							"            console.log(\"operationWindow tag is present\");",
							"            ",
							"if((tests[\"Validating type tag\"] = responseBody.has(\"type\")))      ",
							"            console.log(\"type tag is present\");",
							"            ",
							"if((tests[\"Validating rpoInMinutes tag\"] = responseBody.has(\"rpoInMinutes\")))      ",
							"            console.log(\"rpoInMinutes tag is present\");",
							"",
							"pm.environment.set(\"schedulePolicyId\", jsonData.plan.schedule.task.taskId);",
							"pm.environment.set(\"subtasks\", jsonData.plan.schedule.subTasks);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}?propertyLevel=20",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					],
					"query": [
						{
							"key": "propertyLevel",
							"value": "20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plans details Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"if((tests[\"Validating securityAssociations tag\"] = responseBody.has(\"securityAssociations\")))      ",
							"            console.log(\"securityAssociations tag is present\");",
							"            ",
							"if((tests[\"Validating inheritance tag\"] = responseBody.has(\"inheritance\")))      ",
							"            console.log(\"inheritance tag is present\");",
							"            ",
							"if((tests[\"Validating storage tag\"] = responseBody.has(\"storage\")))      ",
							"            console.log(\"storage tag is present\");",
							"            ",
							"if((tests[\"Validating slaInMinutes tag\"] = responseBody.has(\"slaInMinutes\")))      ",
							"            console.log(\"slaInMinutes tag is present\");",
							"            ",
							"if((tests[\"Validating planOwner tag\"] = responseBody.has(\"planOwner\")))      ",
							"            console.log(\"planOwner tag is present\");",
							"            ",
							"if((tests[\"Validating schedule tag\"] = responseBody.has(\"schedule\")))      ",
							"            console.log(\"schedule tag is present\");",
							"            ",
							"if((tests[\"Validating storagePolicyId tag\"] = responseBody.has(\"storagePolicyId\")))      ",
							"            console.log(\"storagePolicyId tag is present\");",
							"            ",
							"if((tests[\"Validating operationWindow tag\"] = responseBody.has(\"operationWindow\")))      ",
							"            console.log(\"operationWindow tag is present\");",
							"            ",
							"if((tests[\"Validating type tag\"] = responseBody.has(\"type\")))      ",
							"            console.log(\"type tag is present\");",
							"            ",
							"if((tests[\"Validating rpoInMinutes tag\"] = responseBody.has(\"rpoInMinutes\")))      ",
							"            console.log(\"rpoInMinutes tag is present\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}?propertyLevel=20",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}"
					],
					"query": [
						{
							"key": "propertyLevel",
							"value": "20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Plan Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							"",
							"if (\"plan\" in jsonData.plan.summary) {",
							"    tests[\"Plan name successfully modified\"] = jsonData.plan.summary.plan.planName == postman.getEnvironmentVariable(\"planName\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"postman.setEnvironmentVariable(\"planName\", \"UpdatedPlanName \" + new Date().getTime());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"summary\": {\r\n    \"plan\": {\r\n      \"planName\": \"{{planName}}\"\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userOperationType\": 1,\r\n  \"users\": [\r\n    {\r\n      \"sendInvite\": true,\r\n      \"user\": {\r\n        \"userName\": \"admin\"\r\n      }\r\n    }\r\n  ]\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}/Users",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}",
						"Users"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan SLA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							"",
							"if (\"slaInMinutes\" in jsonData.plan.summary) {",
							"    tests[\"SLA successfully modified\"] = jsonData.errors[0].status.errorCode == 0;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"options\": {\r\n        \"slaOptions\": {\r\n            \"delayInterval\": 0,\r\n            \"entityType\": \"PLAN_ENTITY\",\r\n            \"excludeSLA\": false,\r\n            \"inheritedSLA\": {\r\n                \"entityType\": \"COMMCELL_ENTITY\",\r\n                \"slaDays\": 30\r\n            },\r\n            \"inheritedSLAString\": \"1 month, inherited from CommCell\",\r\n            \"level\": \"SLA_FOR_LAST_N_DAYS\",\r\n            \"slaDays\": 90\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}/sla",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}",
						"sla"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan to Full backup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"operation success\"] = jsonData.errorCode == 0;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var subtasks = pm.environment.get(\"subtasks\");\r",
							"subtasks = subtasks.filter(st => !(st.subTask.subTaskType == 1));\r",
							"var subtask = {\r",
							"                \"subTask\": {\r",
							"                    \"subTaskName\": \"Full backup schedule\",\r",
							"                    \"subTaskType\": 2,\r",
							"                    \"flags\": 4194304,\r",
							"                    \"operationType\": 2\r",
							"                },\r",
							"                \"pattern\": {\r",
							"                    \"active_end_occurence\": 0,\r",
							"                    \"freq_subday_interval\": 0,\r",
							"                    \"freq_type\": 8,\r",
							"                    \"description\": \"Admin Console schedule pattern 2020-07-22 13.50.45.604\",\r",
							"                    \"active_end_date\": 0,\r",
							"                    \"active_start_time\": 0,\r",
							"                    \"active_start_date\": 0,\r",
							"                    \"freq_interval\": 65,\r",
							"                    \"name\": \"Full backup schedule\",\r",
							"                    \"freq_recurrence_factor\": 1,\r",
							"                    \"daysToRun\": {\r",
							"                        \"Monday\": false,\r",
							"                        \"Thursday\": false,\r",
							"                        \"Friday\": false,\r",
							"                        \"Sunday\": true,\r",
							"                        \"Wednesday\": false,\r",
							"                        \"Tuesday\": false,\r",
							"                        \"Saturday\": true\r",
							"                    },\r",
							"                    \"timeZone\": {\r",
							"                        \"TimeZoneID\": 1001,\r",
							"                        \"TimeZoneName\": \"Client Time Zone\"\r",
							"                    }\r",
							"                },\r",
							"                \"options\": {\r",
							"                    \"backupOpts\": {\r",
							"                        \"sybaseSkipFullafterLogBkp\": false,\r",
							"                        \"backupLevel\": 1,\r",
							"                        \"incLevel\": 1,\r",
							"                        \"runIncrementalBackup\": true,\r",
							"                        \"isSpHasInLineCopy\": false,\r",
							"                        \"runSILOBackup\": false,\r",
							"                        \"doNotTruncateLog\": false,\r",
							"                        \"dataOpt\": {\r",
							"                            \"daysBetweenSyntheticBackup\": 0\r",
							"                        }\r",
							"                    },\r",
							"                    \"adminOpts\": {\r",
							"                        \"updateOption\": {\r",
							"                            \"invokeLevel\": 0\r",
							"                        }\r",
							"                    }\r",
							"                }\r",
							"            };\r",
							"pm.environment.set(\"subTasks\", JSON.stringify(subtasks.concat(subtask)));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"taskInfo\": {\r\n        \"task\": {\r\n            \"taskId\": {{schedulePolicyId}},\r\n            \"task\": {\r\n                \"taskId\": {{schedulePolicyId}}\r\n            }\r\n        },\r\n        \"subTasks\": {{subTasks}}\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/SchedulePolicy/{{schedulePolicyId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"SchedulePolicy",
						"{{schedulePolicyId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan Backup window",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							"",
							"tests[\"Response Body contains Full backup schedule\"] = responseBody.has(\"Full backup schedule\");",
							"",
							"tests[\"Response Body contains Full backup schedule\"] = responseBody.has(\"Sunday\") && responseBody.has(\"Saturday\");",
							"",
							"if (\"operationWindow\" in jsonData.plan) {",
							"    tests[\"Operation window set successfully\"] = jsonData.plan.operationWindow.ruleEnabled == true && jsonData.plan.operationWindow.dayTime[0].dayOfWeek[0] == 0",
							"}",
							"",
							"pm.environment.set(\"operationWindowRuleId\", jsonData.plan.operationWindow.ruleId);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operationWindow\": {\r\n        \"ruleEnabled\": true,\r\n        \"name\": \"backup window\",\r\n        \"operations\": [\r\n            2,\r\n            4\r\n        ],\r\n        \"company\": {\r\n            \"entityInfo\": {},\r\n            \"flags\": {}\r\n        },\r\n        \"entity\": {\r\n            \"timeZone\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            },\r\n            \"flags\": {},\r\n            \"subtask\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            },\r\n            \"entityInfo\": {},\r\n            \"client\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            },\r\n            \"owner\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            }\r\n        },\r\n        \"dayTime\": [\r\n            {\r\n                \"startTime\": 0,\r\n                \"endTime\": 3600,\r\n                \"dayOfWeek\": [\r\n                    1,\r\n                    2,\r\n                    3,\r\n                    4,\r\n                    5,\r\n                    6\r\n                ]\r\n            },\r\n            {\r\n                \"startTime\": 0,\r\n                \"endTime\": 86340,\r\n                \"dayOfWeek\": [\r\n                    0\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"summary\": {\r\n        \"rpoInMinutes\": 600,\r\n        \"plan\": {\r\n            \"planId\": {{planId}}\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan full backup window",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"if (\"fullOperationWindow\" in jsonData.plan) {",
							"    tests[\"Operation window set successfully\"] = jsonData.plan.fullOperationWindow.ruleEnabled == true && jsonData.plan.fullOperationWindow.dayTime[0].dayOfWeek[0] == 1",
							"}",
							"",
							"pm.environment.set(\"fullOperationWindowRuleId\", jsonData.plan.fullOperationWindow.ruleId);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"summary\": {\r\n        \"rpoInMinutes\": 600,\r\n        \"plan\": {\r\n            \"planId\": {{planId}}\r\n        }\r\n    },\r\n    \"fullOperationWindow\": {\r\n        \"ruleEnabled\": true,\r\n        \"name\": \"full backup window\",\r\n        \"operations\": [\r\n            1\r\n        ],\r\n        \"company\": {\r\n            \"entityInfo\": {},\r\n            \"flags\": {}\r\n        },\r\n        \"entity\": {\r\n            \"timeZone\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            },\r\n            \"flags\": {},\r\n            \"subtask\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            },\r\n            \"entityInfo\": {},\r\n            \"client\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            },\r\n            \"owner\": {\r\n                \"entityInfo\": {},\r\n                \"flags\": {}\r\n            }\r\n        },\r\n        \"dayTime\": [\r\n            {\r\n                \"startTime\": 0,\r\n                \"endTime\": 86340,\r\n                \"dayOfWeek\": [\r\n                    1\r\n                ]\r\n            },\r\n            {\r\n                \"startTime\": 82800,\r\n                \"endTime\": 86340,\r\n                \"dayOfWeek\": [\r\n                    2,\r\n                    3,\r\n                    4,\r\n                    5,\r\n                    6,\r\n                    0\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan Options",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							"",
							"if (\"options\" in jsonData.plan) {",
							"    tests[\"quota successfully modified\"] = jsonData.plan.options.quota == 3;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quota\": 3\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}/Options",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}",
						"Options"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "GET Plan Options",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"Response Body contains forcedArchiving\"] = responseBody.has(\"forcedArchiving\");",
							"",
							"tests[\"Response Body contains encryptionInfo\"] = responseBody.has(\"encryptionInfo\");",
							"",
							"tests[\"Response Body contains encryptionSettings\"] = responseBody.has(\"encryptionSettings\");",
							"",
							"if (\"options\" in jsonData) {",
							"    tests[\"quota successfully modified\"] = jsonData.quota == 3;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quota\": 3\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}/Options",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}",
						"Options"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan Storage Modify",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"",
							"tests[\"operation success\"] = jsonData.errorCode == 0;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "PrimaryRetentionInDays",
							"value": "30",
							"type": "text"
						},
						{
							"key": "SecondaryRetentionInDays",
							"value": "30",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}/Storage/Modify",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}",
						"Storage",
						"Modify"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Plan Storage Modify Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"operation success\"] = jsonData.errorCode == 0;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "PrimaryRetentionInDays",
							"value": "30",
							"type": "text"
						},
						{
							"key": "SecondaryRetentionInDays",
							"value": "30",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}/Storage/Modify",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}",
						"Storage",
						"Modify"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Disable Database Add-on",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"operation success\"] = jsonData.error[0].status.errorCode === 0;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}/Addon/Database/Action/Disable",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}",
						"Addon",
						"Database",
						"Action",
						"Disable"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Disable Database Add-on Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"operation success\"] = jsonData.error[0].status.errorCode === 0;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}/Addon/Database/Action/Disable",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}",
						"Addon",
						"Database",
						"Action",
						"Disable"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "GET Plans details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"if (\"addons\" in jsonData.plan.summary) {",
							"    tests[\"DB addon successfully disabled\"] = jsonData.plan.summary.addons.database === false;",
							"    // tests[\"Snap addon successfully disabled\"] = jsonData.plan.summary.addons.snap === false;",
							"}",
							"",
							"tests[\"Response Body contains database\"] = responseBody.has(\"database\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}?propertyLevel=30",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					],
					"query": [
						{
							"key": "propertyLevel",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plans details Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"if (\"addons\" in jsonData.plan.summary) {",
							"    tests[\"DB addon successfully disabled\"] = jsonData.plan.summary.addons.database === false;",
							"    // tests[\"Snap addon successfully disabled\"] = jsonData.plan.summary.addons.snap === false;",
							"}",
							"",
							"tests[\"Response Body contains database\"] = responseBody.has(\"database\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable Database Add-on",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"operation success\"] = jsonData.error[0].status.errorCode === 0;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}/AddOn/Database/Action/Enable",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}",
						"AddOn",
						"Database",
						"Action",
						"Enable"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Enable Database Add-on Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"operation success\"] = jsonData.error[0].status.errorCode === 0;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}/AddOn/Database/Action/Enable",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}",
						"AddOn",
						"Database",
						"Action",
						"Enable"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Edit Log backup RPO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"operation success\"] = jsonData.plan.database.slaInMinutes === 400;",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"summary\": {\n        \"addons\": {\n            \"database\": true\n        },\n        \"plan\": {\n            \"planId\": {{planId}}\n        }\n    },\n    \"database\": {\n        \"slaInMinutes\": 400,\n        \"rpoInMinutes\": 400\n    }\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "DELETE operation window",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"if(tests[\"Response Body contains error code\"] = responseBody.has(\"errorCode\"))",
							"{",
							"    console.log(\"The error message is: \",jsonData.error.erroMessage);",
							"}",
							"tests[\"Operation window deleted\"] = jsonData.error.errorCode === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"type": "text",
						"value": "{{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/OperationWindow/{{operationWindowRuleId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"OperationWindow",
						"{{operationWindowRuleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE full operation window",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"if(tests[\"Response Body contains error code\"] = responseBody.has(\"errorCode\"))",
							"{",
							"    console.log(\"The error message is: \",jsonData.error.erroMessage);",
							"}",
							"tests[\"Operation window deleted\"] = jsonData.error.errorCode === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"type": "text",
						"value": "{{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/OperationWindow/{{fullOperationWindowRuleId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"OperationWindow",
						"{{fullOperationWindowRuleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plans details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"if (\"addons\" in jsonData.plan.summary) {",
							"    tests[\"DB addon successfully enabled\"] = jsonData.plan.summary.addons.database === true;",
							"    // tests[\"Snap addon successfully enabled\"] = jsonData.plan.summary.addons.snap === true;",
							"}",
							"",
							"tests[\"Response Body contains database\"] = responseBody.has(\"database\");",
							"",
							"pm.test(\"Operation window is deleted\", function () {",
							"    pm.expect(jsonData.plan.operationWindow.ruleId).to.eql(0);",
							"});",
							"",
							"console.log(jsonData.plan.operationWindow);",
							"",
							"pm.test(\"Full Operation window is deleted\", function () {",
							"    pm.expect(jsonData.plan.fullOperationWindow.ruleId).to.eql(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}?propertyLevel=30",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					],
					"query": [
						{
							"key": "propertyLevel",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plans details Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"if (\"addons\" in jsonData.plan.summary) {",
							"    tests[\"DB addon successfully enabled\"] = jsonData.plan.summary.addons.database === true;",
							"    // tests[\"Snap addon successfully enabled\"] = jsonData.plan.summary.addons.snap === true;",
							"}",
							"",
							"tests[\"Response Body contains database\"] = responseBody.has(\"database\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Regions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"Response Body contains regions\"] = responseBody.has(\"regions\");",
							"",
							"tests[\"Response Body contains regionType\"] = responseBody.has(\"regionType\");",
							"",
							"tests[\"Response Body contains regionEntity\"] = responseBody.has(\"regionEntity\");",
							"",
							"tests[\"Response Body contains regionId\"] = responseBody.has(\"regionId\");",
							"",
							"tests[\"Response Body contains displayName\"] = responseBody.has(\"displayName\");",
							"",
							"tests[\"Response Body contains regionName\"] = responseBody.has(\"regionName\");",
							"",
							"var rand = Math.floor(Math.random() * (jsonData.regions.length));",
							"",
							"postman.setEnvironmentVariable(\"regionId\", jsonData.regions[rand].regionEntity.regionId);",
							"",
							"postman.setEnvironmentVariable(\"regionName\", jsonData.regions[rand].regionEntity.regionName);",
							"",
							"var rand = Math.floor(Math.random() * (jsonData.regions.length));",
							"",
							"postman.setEnvironmentVariable(\"regionId1\", jsonData.regions[rand].regionEntity.regionId);",
							"",
							"postman.setEnvironmentVariable(\"regionName1\", jsonData.regions[rand].regionEntity.regionName);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Regions",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Regions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Plan Configure region based storage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							"",
							"if (\"storageRules\" in jsonData.plan) {",
							"    tests[\"Plan region rule successfully added\"] = jsonData.plan.storageRules.rules[0].rule.ruleName == postman.getEnvironmentVariable(\"regionRuleName\");",
							"    tests[\"Plan region ID successfully added\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionId = postman.getEnvironmentVariable(\"regionId\");",
							"    tests[\"Plan region Name successfully added\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionName = postman.getEnvironmentVariable(\"regionName\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"postman.setEnvironmentVariable(\"regionRuleName\", \"UpdatedPlanName Rule \" + new Date().getTime());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"storageRules\":{\r\n      \"rules\":[\r\n         {\r\n            \"retentionDays\":30,\r\n            \"rank\":1,\r\n            \"regions\":{\r\n               \"region\":[\r\n                  {\r\n                     \"regionId\": {{regionId}}\r\n                  }\r\n               ]\r\n            },\r\n            \"clientGroup\":{\r\n               \"clientGroupId\":0\r\n            },\r\n            \"agents\":{\r\n               \"agent\":[\r\n                  {\r\n                     \"applicationId\":0\r\n                  }\r\n               ]\r\n            },\r\n            \"rule\":{\r\n               \"ruleName\":\"{{regionRuleName}}\"\r\n            },\r\n            \"storage\":{\r\n               \"copy\":[\r\n                  {\r\n                     \"active\":1,\r\n                     \"isDefault\":1,\r\n                     \"dedupeFlags\":{\r\n                        \"enableDASHFull\":1,\r\n                        \"useGlobalDedupStore\":1,\r\n                        \"enableDeduplication\":1,\r\n                        \"enableClientSideDedup\":1\r\n                     },\r\n                     \"storagePolicyFlags\":{\r\n                        \"blockLevelDedup\":1\r\n                     },\r\n                     \"retentionRules\":{\r\n                        \"retainBackupDataForDays\":30\r\n                     },\r\n                     \"StoragePolicyCopy\":{\r\n                        \"copyName\":\"Primary\"\r\n                     },\r\n                     \"useGlobalPolicy\":{\r\n                        \"storagePolicyName\": \"{{storagePoolName}}\",\r\n                        \"storagePolicyId\": {{storagePoolId}}\r\n                     }\r\n                  }\r\n               ],\r\n               \"storagePool\":{\r\n                  \"storagePolicyName\": \"{{storagePoolName}}\",\r\n                  \"storagePolicyId\": {{storagePoolId}}\r\n               },\r\n               \"storagePolicyName\": \"{{regionName}}\"\r\n            }\r\n         }\r\n      ]\r\n   }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "Update Add another region",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							"",
							"if (\"storageRules\" in jsonData.plan) {",
							"    tests[\"Plan region rule successfully added\"] = jsonData.plan.storageRules.rules[0].rule.ruleName == postman.getEnvironmentVariable(\"regionRuleName\");",
							"    tests[\"Plan region ID successfully added\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionId = postman.getEnvironmentVariable(\"regionId\");",
							"    tests[\"Plan region Name successfully added\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionName = postman.getEnvironmentVariable(\"regionName\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"postman.setEnvironmentVariable(\"regionRuleName1\", \"UpdatedPlanName Rule \" + new Date().getTime());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"storageRules\":{\r\n      \"rules\":[\r\n         {\r\n            \"retentionDays\":30,\r\n            \"rank\":2,\r\n            \"regions\":{\r\n               \"region\":[\r\n                  {\r\n                     \"regionId\":{{regionId1}},\r\n                     \"regionName\":\"{{regionName1}}\"\r\n                  }\r\n               ]\r\n            },\r\n            \"clientGroup\":{\r\n               \"clientGroupId\":0\r\n            },\r\n            \"agents\":{\r\n               \"agent\":[\r\n                  {\r\n                     \"applicationId\":0\r\n                  }\r\n               ]\r\n            },\r\n            \"rule\":{\r\n               \"ruleName\":\"{{regionRuleName1}}\"\r\n            },\r\n            \"storage\":{\r\n               \"copy\":[\r\n                  {\r\n                     \"active\":1,\r\n                     \"isDefault\":1,\r\n                     \"dedupeFlags\":{\r\n                        \"enableDASHFull\":1\r\n                     },\r\n                     \"retentionRules\":{\r\n                        \"retainBackupDataForDays\":30\r\n                     },\r\n                     \"StoragePolicyCopy\":{\r\n                        \"copyName\":\"Primary\"\r\n                     },\r\n                     \"useGlobalPolicy\":{\r\n                        \"storagePolicyId\": {{storagePoolId1}}\r\n                     },\r\n                     \"extendedFlags\":{\r\n                        \"useGlobalStoragePolicy\":1\r\n                     }\r\n                  },\r\n                  {\r\n                     \"copyType\":\"SNAP\",\r\n                     \"isDefault\":\"SET_FALSE\",\r\n                     \"isSnapCopy\":\"SET_TRUE\",\r\n                     \"active\":\"SET_TRUE\",\r\n                     \"retentionRules\":{\r\n                        \"retentionFlags\":{\r\n                           \"ignoreJobDependencyCheck\":\"SET_TRUE\",\r\n                           \"jobBasedRetention\":\"SET_FALSE\"\r\n                        },\r\n                        \"retainBackupDataForDays\":30,\r\n                        \"retainBackupDataForCycles\":0,\r\n                        \"retainArchiverDataForDays\":-1\r\n                     },\r\n                     \"copyPrecedence\":1,\r\n                     \"useGlobalPolicy\":{\r\n                        \"storagePolicyId\":{{storagePoolId1}}\r\n                     },\r\n                     \"extendedFlags\":{\r\n                        \"useGlobalStoragePolicy\":\"SET_TRUE\"\r\n                     }\r\n                  }\r\n               ],\r\n               \"storagePool\":{\r\n                  \"storagePoolId\": {{storagePoolId1}}\r\n               },\r\n               \"storagePolicy\":{\r\n                  \"storagePolicyName\":\"{{regionName1}}\"\r\n               },\r\n               \"enableBackupCopy\":true\r\n            }\r\n         }\r\n      ]\r\n   },\r\n   \"summary\":{\r\n      \"plan\":{\r\n         \"planId\":{{planId}},\r\n         \"planType\":2,\r\n         \"planSubtype\":33554437,\r\n         \"flags\":{\r\n            \r\n         },\r\n         \"entityInfo\":{\r\n            \r\n         }\r\n      }\r\n   }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "GET Plans details 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"Response Body contains rules\"] = responseBody.has(\"rules\");",
							"",
							"tests[\"Response Body contains rank\"] = responseBody.has(\"rank\");",
							"",
							"tests[\"Response Body contains regions\"] = responseBody.has(\"regions\");",
							"",
							"tests[\"Response Body contains regionId\"] = responseBody.has(\"regionId\");",
							"",
							"tests[\"Response Body contains regionName\"] = responseBody.has(\"regionName\");",
							"",
							"if (\"storageRules\" in jsonData.plan) {",
							"    tests[\"Plan region rule successfully validated\"] = jsonData.plan.storageRules.rules[0].rule.ruleName == postman.getEnvironmentVariable(\"regionRuleName\");",
							"    tests[\"Plan region ID successfully validated\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionId = postman.getEnvironmentVariable(\"regionId\");",
							"    tests[\"Plan region Name successfully validated\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionName = postman.getEnvironmentVariable(\"regionName\");",
							"    tests[\"Plan region's storage pool successfully validated\"] = jsonData.plan.storageRules.rules[0].storagePool.storagePoolId = postman.getEnvironmentVariable(\"storagePoolId\");",
							"}",
							"",
							"tests[\"Response Body contains database\"] = responseBody.has(\"database\");",
							"pm.environment.set(\"region1StoragePolicy\", jsonData.plan.storageRules.rules[1].storage.storagePolicy.storagePolicyId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Plan Configure region based storage Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"Response Body contains slaInMinutes\"] = responseBody.has(\"slaInMinutes\");",
							"",
							"tests[\"Response Body contains type\"] = responseBody.has(\"type\");",
							"",
							"tests[\"Response Body contains subtype\"] = responseBody.has(\"subtype\");",
							"",
							"if (\"storageRules\" in jsonData.plan) {",
							"    tests[\"Plan region rule successfully added\"] = jsonData.plan.storageRules.rules[0].rule.ruleName == postman.getEnvironmentVariable(\"regionRuleName\");",
							"    tests[\"Plan region ID successfully added\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionId = postman.getEnvironmentVariable(\"regionId\");",
							"    tests[\"Plan region Name successfully added\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionName = postman.getEnvironmentVariable(\"regionName\");",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"postman.setEnvironmentVariable(\"regionRuleName\", \"UpdatedPlanName Rule1 \" + new Date().getTime());",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"storageRules\":{\r\n      \"rules\":[\r\n         {\r\n            \"retentionDays\":30,\r\n            \"rank\": 1,\r\n            \"regions\":{\r\n               \"region\":[\r\n                  {\r\n                     \"regionId\":{{regionId}},\r\n                     \"regionName\":\"{{regionName}}\"\r\n                  }\r\n               ]\r\n            },\r\n            \"clientGroup\":{\r\n               \"clientGroupId\":0\r\n            },\r\n            \"agents\":{\r\n               \"agent\":[\r\n                  {\r\n                     \"applicationId\":0\r\n                  }\r\n               ]\r\n            },\r\n            \"rule\":{\r\n               \"ruleName\":\"{{regionRuleName}}\"\r\n            },\r\n            \"storage\":{\r\n               \"copy\":[\r\n                  {\r\n                     \"active\":1,\r\n                     \"isDefault\":1,\r\n                     \"dedupeFlags\":{\r\n                        \"enableDASHFull\": 1\r\n                     },\r\n                     \"retentionRules\":{\r\n                        \"retentionFlags\":{\r\n                           \"jobBasedRetention\":\"SET_FALSE\"\r\n                        },\r\n                        \"retainBackupDataForDays\":30,\r\n                        \"retainBackupDataForCycles\":1,\r\n                        \"retainArchiverDataForDays\":-1,\r\n                        \"jobs\":0\r\n                     },\r\n                     \"StoragePolicyCopy\":{\r\n                        \"copyName\":\"Primary\"\r\n                     },\r\n                     \"useGlobalPolicy\":{\r\n                        \"storagePolicyId\":{{storagePoolId1}},\r\n                        \"storagePolicyName\":\"{{storagePoolName1}}\"\r\n                     },\r\n                     \"extendedFlags\":{\r\n                        \"useGlobalStoragePolicy\":\"SET_TRUE\"\r\n                     }\r\n                  },\r\n                  {\r\n                     \"copyType\":\"SNAP\",\r\n                     \"isDefault\":\"SET_FALSE\",\r\n                     \"isSnapCopy\":\"SET_TRUE\",\r\n                     \"active\":\"SET_TRUE\",\r\n                     \"retentionRules\":{\r\n                        \"retentionFlags\":{\r\n                           \"ignoreJobDependencyCheck\":\"SET_TRUE\",\r\n                           \"jobBasedRetention\":\"SET_FALSE\"\r\n                        },\r\n                        \"retainBackupDataForDays\":30,\r\n                        \"retainBackupDataForCycles\":0,\r\n                        \"retainArchiverDataForDays\":-1\r\n                     },\r\n                     \"copyPrecedence\":1,\r\n                     \"useGlobalPolicy\":{\r\n                        \"storagePolicyId\":{{storagePoolId1}},\r\n                        \"storagePolicyName\":\"{{storagePoolName1}}\"\r\n                     },\r\n                     \"extendedFlags\":{\r\n                        \"useGlobalStoragePolicy\":\"SET_TRUE\"\r\n                     }\r\n                  }\r\n               ],\r\n               \"storagePool\":{\r\n                  \"storagePoolId\":{{storagePoolId1}},\r\n                  \"storagePoolName\":\"{{storagePoolName1}}\"\r\n               },\r\n               \"storagePolicy\":{\r\n                  \"storagePolicyName\":\"{{regionName}}\"\r\n               },\r\n               \"enableBackupCopy\":true\r\n            }\r\n         }\r\n      ]\r\n   }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/put_plan_sla.htm"
			},
			"response": []
		},
		{
			"name": "GET Plans details Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"Response Body contains rules\"] = responseBody.has(\"rules\");",
							"",
							"tests[\"Response Body contains rank\"] = responseBody.has(\"rank\");",
							"",
							"tests[\"Response Body contains regions\"] = responseBody.has(\"regions\");",
							"",
							"tests[\"Response Body contains regionId\"] = responseBody.has(\"regionId\");",
							"",
							"tests[\"Response Body contains regionName\"] = responseBody.has(\"regionName\");",
							"",
							"if (\"storageRules\" in jsonData.plan) {",
							"    tests[\"Plan region rule successfully validated\"] = jsonData.plan.storageRules.rules[0].rule.ruleName == postman.getEnvironmentVariable(\"regionRuleName\");",
							"    tests[\"Plan region ID successfully validated\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionId = postman.getEnvironmentVariable(\"regionId\");",
							"    tests[\"Plan region Name successfully validated\"] = jsonData.plan.storageRules.rules[0].regions.region[0].regrionName = postman.getEnvironmentVariable(\"regionName\");",
							"    tests[\"Plan region's storage pool successfully validated\"] = jsonData.plan.storageRules.rules[0].storagePool.storagePoolId = postman.getEnvironmentVariable(\"storagePoolId\");",
							"}",
							"",
							"tests[\"Response Body contains database\"] = responseBody.has(\"database\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Plan Security",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"operation success\"] = jsonData.response[0].errorCode == 0;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"entityAssociated\": {\r\n\t\t\"entity\": [\r\n\t\t\t{\r\n\t\t\t\t\"entityType\": 158,\r\n\t\t\t\t\"_type_\": 150,\r\n\t\t\t\t\"entityId\": {{planId}}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"securityAssociations\": {\r\n\t\t\"associationsOperationType\": 1,\r\n\t\t\"associations\": [\r\n\t\t\t{\r\n\t\t\t\t\"userOrGroup\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"userName\": \"admin\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"properties\": {\r\n\t\t\t\t\t\"role\": {\r\n\t\t\t\t\t\t\"_type_\": 120,\r\n\t\t\t\t\t\t\"roleId\": 3\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Security",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Security"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plan security verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"associations = jsonData.securityAssociations[0].securityAssociations.associations;",
							"",
							"tests[\"Newly added security association is present\"] = (function() {",
							"    for( i=0; i < associations.length; i++)",
							"        if (associations[i].userOrGroup[0].userName == \"admin\" && associations[i].properties.role.roleId == 3)",
							"            return true;",
							"    return false;",
							"})();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Security/158/{{planId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Security",
						"158",
						"{{planId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Backup Set using client name Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"console.log(\"Response received:\", jsonData);",
							"",
							"if((tests[\"Validating if Status code is 200\"] = responseCode.code === 200))",
							"    console.log(\"Status code 200 validated\");",
							"",
							"if((tests[\"Validating backupsetProperties tag\"] = responseBody.has(\"backupsetProperties\")))      //validate clientProperties tag",
							"        console.log(\"backupsetProperties tag is present\");",
							"postman.setEnvironmentVariable(\"backupsetId\", jsonData.backupsetProperties[0].backupSetEntity.backupsetId);",
							"console.log(\"Value of backupsetId set to :\" ,postman.getEnvironmentVariable(\"backupsetId\"));",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Backupset?clientId=2",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Backupset"
					],
					"query": [
						{
							"key": "clientId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Client region",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"operation success\"] = jsonData.response[0].errorCode == 0;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"clientProperties\":{\n\t\t\"clientProps\":{\n\t\t\t\"clientRegionInfo\":{\n\t\t\t\t\"region\":{\n\t\t\t\t\t\"regionId\":{{regionId1}}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Client/2",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Client",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Plan Backupset assocition",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"operation success\"] = jsonData.response[0].errorCode == 0;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"backupsetProperties\": {\r\n    \"planEntity\": {\r\n      \"_type_\": 158,\r\n      \"planId\": {{planId}}\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Backupset/{{backupsetId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Backupset",
						"{{backupsetId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plan backupset association validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"Validation success\"] = jsonData.backupsetProperties[0].planEntity.planId == postman.getEnvironmentVariable(\"planId\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Backupset/{{backupsetId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Backupset",
						"{{backupsetId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Subclient Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"postman.setEnvironmentVariable(\"subclientId\", jsonData.subClientProperties[0].subClientEntity.subclientId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Subclient?clientId=2",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Subclient"
					],
					"query": [
						{
							"key": "clientId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Subclient association",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"operation success\"] = jsonData.response[0].errorCode == 0;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"subClientProperties\": {\r\n    \"planEntity\": {\r\n      \"_type_\": 158,\r\n      \"planId\": {{planId}}\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Subclient/{{subclientId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Subclient",
						"{{subclientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Plan subclient association validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"tests[\"Newly added subclient association is present\"] = (function() {",
							"    for( i=0; i < jsonData.subclients.length; i++)",
							"        if (jsonData.subclients[i].subclientId == postman.getEnvironmentVariable(\"subclientId\"))",
							"            return true;",
							"    return false;",
							"})();"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Plan/{{planId}}/Subclients",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Plan",
						"{{planId}}",
						"Subclients"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Subclient Properties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							" ",
							" console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"if((tests[\"Validate subClientProperties tag\"] = responseBody.has(\"subClientProperties\")));",
							"        console.log(\"subClientProperties tag is present\");",
							"        ",
							"if((tests[\"Validate subClientEntity tag\"] = responseBody.has(\"subClientEntity\")));",
							"        console.log(\"subClientEntity tag is present\");",
							"        ",
							"if((tests[\"Validate clientId tag\"] = responseBody.has(\"clientId\")));",
							"        console.log(\"clientId tag is present\");",
							"        ",
							"if((tests[\"Validate fsSubClientProp tag\"] = responseBody.has(\"fsSubClientProp\")));",
							"        console.log(\"fsSubClientProp tag is present\");",
							"        ",
							"if((tests[\"Validate content tag\"] = responseBody.has(\"content\")));",
							"        console.log(\"content tag is present\");",
							"        ",
							"if((tests[\"Validate securityAssociations tag\"] = responseBody.has(\"securityAssociations\")));",
							"        console.log(\"securityAssociations tag is present\");",
							"        ",
							"if((tests[\"Validate security tag\"] = responseBody.has(\"security\")));",
							"        console.log(\"security tag is present\");",
							"        ",
							"if((tests[\"Validate appname tag\"] = responseBody.has(\"appName\"))); {",
							"        console.log(\"security tag is present\");",
							"        tests[\"Validate appName\"] = jsonData.subClientProperties[0].subClientEntity.appName === \"File System\";",
							"}",
							"//tests[\"Validate clientName of subclient\"] = jsonData.subClientProperties[0].subClientEntity.clientName === postman.getEnvironmentVariable(\"clientName\");",
							"",
							"var subclientName = postman.getEnvironmentVariable(\"subclientName\");",
							"",
							"postman.setEnvironmentVariable(\"subclientName\", jsonData.subClientProperties[0].subClientEntity.subclientName);",
							"",
							"console.log(subclientName);",
							"",
							"pm.test(\"Client picked appropriate region\", function () {",
							"    pm.expect(jsonData.subClientProperties[0].commonProperties.storageDevice.dataBackupStoragePolicy.storagePolicyId).to.eql(pm.environment.get(\"region1StoragePolicy\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Subclient/{{subclientId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Subclient",
						"{{subclientId}}"
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_subclient_properties.htm"
			},
			"response": []
		},
		{
			"name": "POST Subclient Backup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							" ",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"if (\"jobIds\" in jsonData)",
							"    postman.setEnvironmentVariable(\"jobId\", parseInt(jsonData.jobIds[0]));",
							"    ",
							"postman.setEnvironmentVariable(\"jobCounter\", 0)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/Subclient/{{subclientId}}/action/backup?backupLevel=Incremental",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Subclient",
						"{{subclientId}}",
						"action",
						"backup"
					],
					"query": [
						{
							"key": "backupLevel",
							"value": "Incremental"
						}
					]
				},
				"description": "http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/post_subclient_backup.htm"
			},
			"response": []
		},
		{
			"name": "Job Summary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.jobs[0].jobSummary.storagePolicy.storagePolicyId).to.eql(pm.environment.get(\"region1StoragePolicy\"));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){//put your code in here to be delayed by 2 seconds\r",
							"    console.log(\"20s sleep\");\r",
							"},20000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Job/{{jobId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Job",
						"{{jobId}}"
					]
				},
				"description": "<h2>Description</h2>\nThis operation returns the summary for a specific job.\n\n[_More Details_](http://documentation.commvault.com/commvault/v11/article?p=features/rest_api/operations/get_job_summary.htm)"
			},
			"response": []
		},
		{
			"name": "POST Job Kill",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"setTimeout(function(){//put your code in here to be delayed by 2 seconds",
							"    console.log(\"10s sleep\");",
							"},10000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){//put your code in here to be delayed by 2 seconds",
							"    console.log(\"20s sleep\");",
							"},20000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/Job/{{jobId}}/action/kill",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Job",
						"{{jobId}}",
						"action",
						"kill"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Plan Subclient dissociate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"console.log(jsonData)",
							"tests[\"operation success\"] = jsonData.response[0].errorCode == 0;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"subClientProperties\": {\r\n    \"planEntity\": {\r\n      \"planName\": \"Common Plan\"\r\n    }\r\n  }\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Subclient/{{subclientId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Subclient",
						"{{subclientId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Client region unset",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"/*if (tests[\"Response time is less than 5000ms\"] = responseTime < 5000 == true);//validate response time",
							" {",
							"     console.log(\"Response time validated\");",
							" }",
							"*/",
							"console.log(tests[\"Status code is 200\"] = responseCode.code === 200);         //validate status code",
							"",
							"console.log(tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\"));",
							"",
							"",
							"tests[\"operation success\"] = jsonData.response[0].errorCode == 0;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"clientProperties\":{\n\t\t\"clientProps\":{\n\t\t\t\"clientRegionInfo\":{\n\t\t\t\t\"region\":{\n\t\t\t\t\t\"regionId\":0\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Client/2",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Client",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Plan",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Validating error code\"] = Object.keys(jsonData).length === 0;"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId}}?confirmDelete=true",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId}}"
					],
					"query": [
						{
							"key": "confirmDelete",
							"value": "true"
						}
					]
				},
				"description": "<h2>Description</h2>\nThis operation deletes a Plan."
			},
			"response": [
				{
					"name": "Delete Plan",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Authtoken",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServerUrl}}/Plan/{{PlanId}}?confirmDelete=true",
							"host": [
								"{{ServerUrl}}"
							],
							"path": [
								"Plan",
								"{{PlanId}}"
							],
							"query": [
								{
									"key": "confirmDelete",
									"value": "true"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "35",
							"name": "Content-Length",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8",
							"name": "Content-Type",
							"description": ""
						},
						{
							"key": "Date",
							"value": "Fri, 15 Sep 2017 17:51:53 GMT",
							"name": "Date",
							"description": ""
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5",
							"name": "Server",
							"description": ""
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET",
							"name": "X-Powered-By",
							"description": ""
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"httpOnly": true,
							"domain": "######",
							"path": "/webconsole",
							"secure": false,
							"value": "930C162901E43496C2ED776C7233E414",
							"key": "JSESSIONID"
						}
					],
					"body": "{\r\"errorMessage\":\"\",\"errorCode\":0\r}"
				}
			]
		},
		{
			"name": "Plan Non-Dedupe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"tests[\"Validating error code\"] = Object.keys(jsonData).length === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "{{Accept}}"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/v2/Plan/{{planId1}}?confirmDelete=true",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v2",
						"Plan",
						"{{planId1}}"
					],
					"query": [
						{
							"key": "confirmDelete",
							"value": "true"
						}
					]
				},
				"description": "<h2>Description</h2>\nThis operation deletes a Plan."
			},
			"response": [
				{
					"name": "Delete Plan",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Authtoken",
								"value": "{{TOKEN}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{ServerUrl}}/Plan/{{PlanId}}?confirmDelete=true",
							"host": [
								"{{ServerUrl}}"
							],
							"path": [
								"Plan",
								"{{PlanId}}"
							],
							"query": [
								{
									"key": "confirmDelete",
									"value": "true"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Length",
							"value": "35",
							"name": "Content-Length",
							"description": ""
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=utf-8",
							"name": "Content-Type",
							"description": ""
						},
						{
							"key": "Date",
							"value": "Fri, 15 Sep 2017 17:51:53 GMT",
							"name": "Date",
							"description": ""
						},
						{
							"key": "Server",
							"value": "Microsoft-IIS/8.5",
							"name": "Server",
							"description": ""
						},
						{
							"key": "X-Powered-By",
							"value": "ASP.NET",
							"name": "X-Powered-By",
							"description": ""
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date",
							"httpOnly": true,
							"domain": "######",
							"path": "/webconsole",
							"secure": false,
							"value": "930C162901E43496C2ED776C7233E414",
							"key": "JSESSIONID"
						}
					],
					"body": "{\r\"errorMessage\":\"\",\"errorCode\":0\r}"
				}
			]
		},
		{
			"name": "Storage Pool",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var storagePoolId = postman.getEnvironmentVariable(\"storagePoolId\");",
							"postman.setEnvironmentVariable(\"storagePoolId\",storagePoolId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"if(tests[\"Response Body contains error code\"] = responseBody.has(\"errorCode\"))",
							"{",
							"    console.log(\"The error message is: \",jsonData.error.erroMessage);",
							"}",
							"tests[\"Storage pool deleted\"] = jsonData.error.errorCode === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"type": "text",
						"value": "{{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/StoragePool/{{storagePoolId1}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"StoragePool",
						"{{storagePoolId1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Storage Pool",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var storagePoolId = postman.getEnvironmentVariable(\"storagePoolId\");",
							"postman.setEnvironmentVariable(\"storagePoolId\",storagePoolId);",
							"",
							"// setTimeout(function(){//put your code in here to be delayed by 2 seconds",
							"//     console.log(\"120s sleep\");",
							"// },120000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"if(tests[\"Response Body contains error code\"] = responseBody.has(\"errorCode\"))",
							"{",
							"    console.log(\"The error message is: \",jsonData.error.erroMessage);",
							"}",
							"tests[\"Storage pool deleted\"] = jsonData.error.errorCode === 0;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"type": "text",
						"value": "{{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/StoragePool/{{storagePoolId}}",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"StoragePool",
						"{{storagePoolId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"",
							"if((tests[\"Validate Logout\"] = responseBody.has(\"User logged out\")) === true);      ",
							"        console.log(\"Logout Validated\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{ServerURL}}/Logout",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Logout"
					]
				}
			},
			"response": []
		}
	]
}