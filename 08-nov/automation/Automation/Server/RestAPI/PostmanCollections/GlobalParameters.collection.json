{
	"info": {
		"_postman_id": "5308914a-29f1-4ec9-a1c8-271672317115",
		"name": "Global Parameters",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31953132"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"Token\", jsonData.token);",
							"",
							"//tests[\"Response time is less than 5000ms\"] = responseTime < 5000;   //validate response time",
							"postman.setEnvironmentVariable(\"userGUID\",jsonData.userGUID);",
							"tests[\"Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"var username = postman.getEnvironmentVariable(\"UserName\");                  ",
							"tests[\"Logged in User\"] = jsonData.userName === username;                //validate username of logged in user",
							"",
							"console.log(postman.getResponseHeader(\"Content-Type\"));",
							"console.log(postman.getEnvironmentVariable(\"Token\"));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n    \"mode\":\"{{Mode}}\",\r\n    \"domain\":\"\",\r\n    \"username\":\"{{UserName}}\",\r\n    \"password\":\"{{Password}}\",\r\n    \"commserver\":\"\"\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/Login",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Global Parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Validating if Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Validating if Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Validating if Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"tests[\"Response Body has globalParamsResultList\"] = responseBody.has(\"globalParamsResultList\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"globalParamsRequestList\": [\r\n    \"CI_STATE_FAILED\",\r\n    \"CI_STATE_SKIPPED\",\r\n    \"AppMgrInitThreadCount\"\r\n  ]\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/CommServ/GlobalParams",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"CommServ",
						"GlobalParams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Global Parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Validating if Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Validating if Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Validating if Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"tests[\"Validating if errorCode is present\"] = responseBody.has(\"errorCode\");",
							"if (jsonData.errorCode === 0)",
							"{",
							"    console.log(\"Operation was carried out successfully. But changes will take about 10 mins to get reflected in POST/CommServ/GlobalParams API\")",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"name\": \"checking\",\r\n    \"value\": \"100\"\r\n}\r\n"
				},
				"url": {
					"raw": "{{ServerURL}}/setGlobalParam",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"setGlobalParam"
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Global Parameter immediately",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Validating if Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Validating if Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Validating if Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"tests[\"Validating if errorCode is present\"] = responseBody.has(\"errorCode\");",
							"if (jsonData.errorCode === 0)",
							"{",
							"    console.log(\"Operation was carried out successfully.\")",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"postman.setEnvironmentVariable(\"name\",\"checking\");\r",
							"postman.setEnvironmentVariable(\"value\",Math.floor(Math.random() * 1000));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"globalSettings\": [\r\n        {\r\n            \"name\": \"checking\",\r\n            \"type\": \"String\",\r\n            \"newValue\": \"{{value}}\",\r\n            \"category\": \"CommServDB.GxGlobalParam\",\r\n            \"comment\": \"checking\",\r\n            \"enable\": true\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/v4/GlobalSettings",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"v4",
						"GlobalSettings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Global Parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"tests[\"Validating if Status code is 200\"] = responseCode.code === 200;            //validate status code",
							"tests[\"Validating if Status code name has string\"] = responseCode.name.has(\"OK\");",
							"tests[\"Validating if Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");     //validate content-type",
							"tests[\"Response Body has globalParamsResultList\"] = responseBody.has(\"globalParamsResultList\");",
							"tests[\"Newly updated Global Parameter is present\"] = (function() {",
							"    for( i=0; i < jsonData.globalParamsResultList.length; i++)",
							"        if (jsonData.globalParamsResultList[i].name == postman.getEnvironmentVariable(\"name\") && jsonData.globalParamsResultList[i].value == postman.getEnvironmentVariable(\"value\") )",
							"            return true;",
							"    return false;",
							"})();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"globalParamsRequestList\": [\r\n    \"CI_STATE_FAILED\",\r\n    \"CI_STATE_SKIPPED\",\r\n    \"AppMgrInitThreadCount\",\r\n    \"{{name}}\"\r\n  ]\r\n}"
				},
				"url": {
					"raw": "{{ServerURL}}/CommServ/GlobalParams",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"CommServ",
						"GlobalParams"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var token = postman.getEnvironmentVariable(\"Token\"); ",
							"",
							"",
							"postman.setEnvironmentVariable(\"Token\", token);",
							"",
							"console.log(\"value of token set:\", token);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;",
							"",
							"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
							"",
							"if((tests[\"Validate Logout\"] = responseBody.has(\"User logged out\")) === true);      ",
							"        console.log(\"Logout Validated\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authtoken",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{ServerURL}}/Logout",
					"host": [
						"{{ServerURL}}"
					],
					"path": [
						"Logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}